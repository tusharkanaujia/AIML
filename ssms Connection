# ============================================================================
# SSMS 21 Connection Manager - Step 3 of 3 - PROJECT FILES
# ============================================================================
# Save as: Step3-ProjectFiles-SSMS21.ps1
# For SQL Server Management Studio 21 (2025)
# ============================================================================

$ProjectName = "SSMSConnectionManager"
$RootDir = Join-Path $PWD $ProjectName

Write-Host ""
Write-Host "SSMS 21 Connection Manager - Step 3 of 3" -ForegroundColor Cyan
Write-Host ""

if (-not (Test-Path $RootDir)) {
    Write-Host "ERROR: Project folder not found. Run Step1 and Step2 first!" -ForegroundColor Red
    exit
}

# Read SSMS path from Step 1
$ssmsPathFile = "$RootDir\.ssms-path.txt"
if (Test-Path $ssmsPathFile) {
    $ssmsPath = Get-Content $ssmsPathFile -Raw
    $ssmsPath = $ssmsPath.Trim()
} else {
    $ssmsPath = "C:\Program Files (x86)\Microsoft SQL Server Management Studio 21"
}

Write-Host "Using SSMS path: $ssmsPath" -ForegroundColor Gray
Write-Host ""

# ============================================================================
# PROJECT FILE (.csproj) - SSMS 21 SPECIFIC
# ============================================================================

$CsprojContent = @"
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net8.0-windows</TargetFramework>
    <RootNamespace>SSMSConnectionManager</RootNamespace>
    <AssemblyName>SSMSConnectionManager</AssemblyName>
    <GeneratePkgDefFile>true</GeneratePkgDefFile>
    <IncludeAssemblyInVSIXContainer>true</IncludeAssemblyInVSIXContainer>
    <IncludeDebugSymbolsInVSIXContainer>true</IncludeDebugSymbolsInVSIXContainer>
    <IncludeDebugSymbolsInLocalVSIXDeployment>true</IncludeDebugSymbolsInLocalVSIXDeployment>
    <CopyBuildOutputToOutputDirectory>true</CopyBuildOutputToOutputDirectory>
    <CopyOutputSymbolsToOutputDirectory>false</CopyOutputSymbolsToOutputDirectory>
    <UseCodebase>true</UseCodebase>
    <UseWindowsForms>true</UseWindowsForms>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Microsoft.VisualStudio.SDK" Version="17.8.37221" ExcludeAssets="runtime" />
    <PackageReference Include="Microsoft.VSSDK.BuildTools" Version="17.8.2345" />
    <PackageReference Include="System.Text.Json" Version="8.0.0" />
  </ItemGroup>
  <ItemGroup>
    <Reference Include="Microsoft.SqlServer.Management.Sdk.Sfc">
      <HintPath>$ssmsPath\Common7\IDE\Microsoft.SqlServer.Management.Sdk.Sfc.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.SqlServer.ConnectionInfo">
      <HintPath>$ssmsPath\Common7\IDE\Microsoft.SqlServer.ConnectionInfo.dll</HintPath>
      <Private>False</Private>
    </Reference>
    <Reference Include="Microsoft.SqlServer.Management.UI.VSIntegration">
      <HintPath>$ssmsPath\Common7\IDE\Microsoft.SqlServer.Management.UI.VSIntegration.dll</HintPath>
      <Private>False</Private>
    </Reference>
  </ItemGroup>
  <ItemGroup>
    <VSCTCompile Include="VSPackage.vsct">
      <ResourceName>Menus.ctmenu</ResourceName>
    </VSCTCompile>
  </ItemGroup>
  <ItemGroup>
    <EmbeddedResource Include="VSPackage.resx">
      <MergeWithCTO>true</MergeWithCTO>
      <ManifestResourceName>VSPackage</ManifestResourceName>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <Content Include="Resources\Icon.png">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
      <IncludeInVSIX>true</IncludeInVSIX>
    </Content>
  </ItemGroup>
</Project>
"@

$CsprojContent | Out-File "$RootDir\$ProjectName.csproj" -Encoding UTF8
Write-Host "Created: $ProjectName.csproj" -ForegroundColor Gray

# ============================================================================
# MANIFEST - SSMS 21 COMPATIBLE
# ============================================================================

$ManifestContent = @'
<?xml version="1.0" encoding="utf-8"?>
<PackageManifest Version="2.0.0" xmlns="http://schemas.microsoft.com/developer/vsx-schema/2011">
  <Metadata>
    <Identity Id="SSMSConnectionManager.a1b2c3d4-e5f6-7890-abcd-ef1234567890" Version="1.0" Language="en-US" Publisher="YourName" />
    <DisplayName>SSMS Connection Manager</DisplayName>
    <Description>Manage SQL Server connections with groups, favorites, and secure password storage.</Description>
    <License>LICENSE.txt</License>
    <Icon>Resources\Icon.png</Icon>
    <Tags>SSMS, SQL Server, Connection, Database</Tags>
  </Metadata>
  <Installation>
    <InstallationTarget Id="Microsoft.VisualStudio.Pro" Version="[17.0,18.0)">
      <ProductArchitecture>amd64</ProductArchitecture>
    </InstallationTarget>
    <InstallationTarget Id="Microsoft.SQLServer.ManagementStudio" Version="[21.0,22.0)">
      <ProductArchitecture>amd64</ProductArchitecture>
    </InstallationTarget>
  </Installation>
  <Dependencies>
    <Dependency Id="Microsoft.Framework.NDP" DisplayName="Microsoft .NET" Version="[8.0,)" />
  </Dependencies>
  <Prerequisites>
    <Prerequisite Id="Microsoft.VisualStudio.Component.CoreEditor" Version="[17.0,18.0)" DisplayName="Visual Studio core editor" />
  </Prerequisites>
  <Assets>
    <Asset Type="Microsoft.VisualStudio.VsPackage" d:Source="Project" d:ProjectName="%CurrentProject%" Path="|%CurrentProject%;PkgdefProjectOutputGroup|" />
  </Assets>
</PackageManifest>
'@

$ManifestContent | Out-File "$RootDir\source.extension.vsixmanifest" -Encoding UTF8
Write-Host "Created: source.extension.vsixmanifest" -ForegroundColor Gray

# ============================================================================
# VSCT FILE
# ============================================================================

$VsctContent = @'
<?xml version="1.0" encoding="utf-8"?>
<CommandTable xmlns="http://schemas.microsoft.com/VisualStudio/2005-10-18/CommandTable">
  <Extern href="stdidcmd.h"/>
  <Extern href="vsshlids.h"/>
  <Commands package="guidConnectionManagerPackage">
    <Groups>
      <Group guid="guidConnectionManagerCmdSet" id="MyMenuGroup" priority="0x0600">
        <Parent guid="guidSHLMainMenu" id="IDM_VS_TOOL_STANDARD"/>
      </Group>
    </Groups>
    <Buttons>
      <Button guid="guidConnectionManagerCmdSet" id="ShowConnectionManagerCommandId" priority="0x0100" type="Button">
        <Parent guid="guidConnectionManagerCmdSet" id="MyMenuGroup" />
        <Icon guid="guidImages" id="bmpPic1" />
        <Strings>
          <ButtonText>Connection Manager</ButtonText>
        </Strings>
      </Button>
    </Buttons>
    <Bitmaps>
      <Bitmap guid="guidImages" href="Resources\Icon.png" usedList="bmpPic1"/>
    </Bitmaps>
  </Commands>
  <Symbols>
    <GuidSymbol name="guidConnectionManagerPackage" value="{a1b2c3d4-e5f6-7890-abcd-ef1234567890}" />
    <GuidSymbol name="guidConnectionManagerCmdSet" value="{b2c3d4e5-f6a7-8901-bcde-f12345678901}">
      <IDSymbol name="MyMenuGroup" value="0x1020" />
      <IDSymbol name="ShowConnectionManagerCommandId" value="0x0100" />
    </GuidSymbol>
    <GuidSymbol name="guidImages" value="{c3d4e5f6-a7b8-9012-cdef-123456789012}">
      <IDSymbol name="bmpPic1" value="1" />
    </GuidSymbol>
  </Symbols>
</CommandTable>
'@

$VsctContent | Out-File "$RootDir\VSPackage.vsct" -Encoding UTF8
Write-Host "Created: VSPackage.vsct" -ForegroundColor Gray

# ============================================================================
# RESX FILE
# ============================================================================

$ResxContent = @'
<?xml version="1.0" encoding="utf-8"?>
<root>
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true"></xsd:element>
  </xsd:schema>
  <resheader name="resmimetype"><value>text/microsoft-resx</value></resheader>
  <resheader name="version"><value>2.0</value></resheader>
  <resheader name="reader"><value>System.Resources.ResXResourceReader, System.Windows.Forms</value></resheader>
  <resheader name="writer"><value>System.Resources.ResXResourceWriter, System.Windows.Forms</value></resheader>
  <data name="110" xml:space="preserve"><value>SSMS Connection Manager</value></data>
  <data name="112" xml:space="preserve"><value>Manage SQL Server connections</value></data>
  <data name="400" type="System.Resources.ResXFileRef, System.Windows.Forms"><value>Resources\Icon.png;System.Drawing.Bitmap</value></data>
</root>
'@

$ResxContent | Out-File "$RootDir\VSPackage.resx" -Encoding UTF8
Write-Host "Created: VSPackage.resx" -ForegroundColor Gray

# ============================================================================
# CREATE ICON
# ============================================================================

Write-Host "Creating icon..."
try {
    Add-Type -AssemblyName System.Drawing
    $bmp = New-Object System.Drawing.Bitmap(16, 16)
    $g = [System.Drawing.Graphics]::FromImage($bmp)
    $blueBrush = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::FromArgb(41, 128, 185))
    $g.FillRectangle($blueBrush, 0, 0, 16, 16)
    $whiteBrush = New-Object System.Drawing.SolidBrush([System.Drawing.Color]::White)
    $g.FillEllipse($whiteBrush, 3, 2, 10, 4)
    $g.FillRectangle($whiteBrush, 3, 4, 10, 8)
    $g.FillEllipse($whiteBrush, 3, 10, 10, 4)
    $bmp.Save("$RootDir\Resources\Icon.png", [System.Drawing.Imaging.ImageFormat]::Png)
    $g.Dispose()
    $blueBrush.Dispose()
    $whiteBrush.Dispose()
    $bmp.Dispose()
    Write-Host "[OK] Icon created" -ForegroundColor Green
} catch {
    Write-Host "[WARNING] Could not create icon" -ForegroundColor Yellow
}

# ============================================================================
# BUILD



-------------------------------------------------------------------------------------------------------------------------------














# ============================================================================
# SSMS 21 Connection Manager - Step 1 of 3
# ============================================================================
# Save as: Step1-Setup-SSMS21.ps1
# For SQL Server Management Studio 21 (2025)
# ============================================================================

$ProjectName = "SSMSConnectionManager"
$RootDir = Join-Path $PWD $ProjectName

Write-Host ""
Write-Host "SSMS 21 Connection Manager - Step 1 of 3" -ForegroundColor Cyan
Write-Host ""

# Clean start
if (Test-Path $RootDir) {
    Write-Host "Cleaning existing project..." -ForegroundColor Yellow
    Remove-Item $RootDir -Recurse -Force
}

# Create structure
Write-Host "Creating project structure..."
New-Item -ItemType Directory -Path $RootDir -Force | Out-Null
New-Item -ItemType Directory -Path "$RootDir\Core" -Force | Out-Null
New-Item -ItemType Directory -Path "$RootDir\UI" -Force | Out-Null
New-Item -ItemType Directory -Path "$RootDir\Commands" -Force | Out-Null
New-Item -ItemType Directory -Path "$RootDir\Properties" -Force | Out-Null
New-Item -ItemType Directory -Path "$RootDir\Resources" -Force | Out-Null

Write-Host "[OK] Folders created" -ForegroundColor Green

# Verify SSMS 21 installation
$ssms21Path = "C:\Program Files (x86)\Microsoft SQL Server Management Studio 21"
if (-not (Test-Path $ssms21Path)) {
    Write-Host ""
    Write-Host "WARNING: SSMS 21 not found at default location" -ForegroundColor Yellow
    Write-Host "Expected: $ssms21Path" -ForegroundColor Gray
    Write-Host ""
    Write-Host "Please locate your SSMS 21 installation folder" -ForegroundColor White
    Write-Host "Common locations:" -ForegroundColor Gray
    Write-Host "  - C:\Program Files (x86)\Microsoft SQL Server Management Studio 21" -ForegroundColor Gray
    Write-Host "  - C:\Program Files\Microsoft SQL Server Management Studio 21" -ForegroundColor Gray
    Write-Host ""
    $ssms21Path = Read-Host "Enter SSMS 21 path (or press Enter to use default)"
    if ([string]::IsNullOrWhiteSpace($ssms21Path)) {
        $ssms21Path = "C:\Program Files (x86)\Microsoft SQL Server Management Studio 21"
    }
}

Write-Host "Using SSMS path: $ssms21Path" -ForegroundColor Green

# Save path for later steps
$ssms21Path | Out-File "$RootDir\.ssms-path.txt" -Encoding UTF8

# ============================================================================
# Core Files
# ============================================================================

Write-Host "Creating Core files..."

# Core\ConnectionInfo.cs
@'
using System;
using System.Collections.Generic;

namespace SSMSConnectionManager
{
    public class ConnectionInfo
    {
        public string ServerName { get; set; }
        public string DatabaseName { get; set; }
        public string Username { get; set; }
        public bool UseWindowsAuth { get; set; }
        public DateTime LastUsed { get; set; }
        public string Alias { get; set; }
        public string GroupName { get; set; }
        public string Color { get; set; }
        public bool IsFavorite { get; set; }
        public int ConnectionTimeout { get; set; } = 30;
        public bool EncryptConnection { get; set; }
        public bool TrustServerCertificate { get; set; }
        public Dictionary<string, string> CustomProperties { get; set; }

        [System.Text.Json.Serialization.JsonIgnore]
        public string Password { get; set; }

        public string DisplayName => 
            !string.IsNullOrEmpty(Alias) 
                ? $"{Alias} ({ServerName} - {DatabaseName})" 
                : $"{ServerName} - {DatabaseName}";

        public string GetConnectionKey()
        {
            return $"{ServerName}|{DatabaseName}|{(UseWindowsAuth ? "WinAuth" : Username)}";
        }

        public ConnectionInfo()
        {
            LastUsed = DateTime.Now;
            CustomProperties = new Dictionary<string, string>();
            Color = "#FFFFFF";
        }
    }
}
'@ | Out-File "$RootDir\Core\ConnectionInfo.cs" -Encoding UTF8

# Core\PasswordManager.cs
@'
using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace SSMSConnectionManager
{
    public class PasswordManager
    {
        private readonly string _passwordDirectory;

        public PasswordManager()
        {
            _passwordDirectory = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                "SSMSConnectionManager",
                "Passwords"
            );
            Directory.CreateDirectory(_passwordDirectory);
        }

        public void SavePassword(string key, string password)
        {
            try
            {
                var encryptedData = ProtectedData.Protect(
                    Encoding.UTF8.GetBytes(password),
                    GetEntropy(),
                    DataProtectionScope.CurrentUser
                );
                File.WriteAllBytes(GetPasswordFilePath(key), encryptedData);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error saving password: {ex.Message}");
            }
        }

        public string GetPassword(string key)
        {
            try
            {
                var filePath = GetPasswordFilePath(key);
                if (!File.Exists(filePath)) return null;
                var encryptedData = File.ReadAllBytes(filePath);
                var decryptedData = ProtectedData.Unprotect(encryptedData, GetEntropy(), DataProtectionScope.CurrentUser);
                return Encoding.UTF8.GetString(decryptedData);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error retrieving password: {ex.Message}");
                return null;
            }
        }

        public void DeletePassword(string key)
        {
            try
            {
                var filePath = GetPasswordFilePath(key);
                if (File.Exists(filePath)) File.Delete(filePath);
            }
            catch { }
        }

        private string GetPasswordFilePath(string key)
        {
            using (var sha256 = SHA256.Create())
            {
                var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(key));
                return Path.Combine(_passwordDirectory, BitConverter.ToString(hashBytes).Replace("-", "").ToLower() + ".pwd");
            }
        }

        private byte[] GetEntropy()
        {
            return Encoding.UTF8.GetBytes("SSMS_Connection_Manager_Entropy_v1");
        }
    }
}
'@ | Out-File "$RootDir\Core\PasswordManager.cs" -Encoding UTF8

# Core\ConnectionManager.cs
@'
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;

namespace SSMSConnectionManager
{
    public class ConnectionManager
    {
        private readonly string _configPath;
        private List<ConnectionInfo> _recentConnections;
        private readonly PasswordManager _passwordManager;
        private const int MaxRecentConnections = 20;

        public ConnectionManager()
        {
            _configPath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                "SSMSConnectionManager",
                "ssms_connections.json"
            );
            Directory.CreateDirectory(Path.GetDirectoryName(_configPath));
            _passwordManager = new PasswordManager();
            LoadConnections();
        }

        public void AddConnection(ConnectionInfo connection)
        {
            if (!connection.UseWindowsAuth && !string.IsNullOrEmpty(connection.Password))
            {
                _passwordManager.SavePassword(connection.GetConnectionKey(), connection.Password);
                connection.Password = null;
            }
            _recentConnections.RemoveAll(c => c.GetConnectionKey() == connection.GetConnectionKey());
            connection.LastUsed = DateTime.Now;
            _recentConnections.Insert(0, connection);
            if (_recentConnections.Count > MaxRecentConnections)
            {
                _recentConnections = _recentConnections.Take(MaxRecentConnections).ToList();
            }
            SaveConnections();
        }

        public List<ConnectionInfo> GetRecentConnections()
        {
            return _recentConnections ?? new List<ConnectionInfo>();
        }

        public List<ConnectionInfo> GetConnectionsByGroup(string groupName)
        {
            if (string.IsNullOrEmpty(groupName)) return GetRecentConnections();
            return _recentConnections.Where(c => c.GroupName == groupName).ToList();
        }

        public List<string> GetAllGroups()
        {
            return _recentConnections
                .Where(c => !string.IsNullOrEmpty(c.GroupName))
                .Select(c => c.GroupName)
                .Distinct()
                .OrderBy(g => g)
                .ToList();
        }

        public void RemoveConnection(ConnectionInfo connection)
        {
            var key = connection.GetConnectionKey();
            _recentConnections.RemoveAll(c => c.GetConnectionKey() == key);
            if (!connection.UseWindowsAuth) _passwordManager.DeletePassword(key);
            SaveConnections();
        }

        public void SwitchConnection(ConnectionInfo connection)
        {
            if (!connection.UseWindowsAuth)
            {
                connection.Password = _passwordManager.GetPassword(connection.GetConnectionKey());
            }
            connection.LastUsed = DateTime.Now;
            AddConnection(connection);
        }

        private void LoadConnections()
        {
            try
            {
                if (File.Exists(_configPath))
                {
                    var json = File.ReadAllText(_configPath);
                    _recentConnections = JsonSerializer.Deserialize<List<ConnectionInfo>>(json) ?? new List<ConnectionInfo>();
                }
                else
                {
                    _recentConnections = new List<ConnectionInfo>();
                }
            }
            catch
            {
                _recentConnections = new List<ConnectionInfo>();
            }
        }

        private void SaveConnections()
        {
            try
            {
                var json = JsonSerializer.Serialize(_recentConnections, new JsonSerializerOptions { WriteIndented = true });
                File.WriteAllText(_configPath, json);
            }
            catch { }
        }
    }
}
'@ | Out-File "$RootDir\Core\ConnectionManager.cs" -Encoding UTF8

# Core\ImportExportManager.cs
@'
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;

namespace SSMSConnectionManager
{
    public class ImportExportManager
    {
        private readonly ConnectionManager _manager;

        public ImportExportManager(ConnectionManager manager)
        {
            _manager = manager;
        }

        public void ExportConnections(string filePath, bool includePasswords = false)
        {
            var exportData = new ExportData
            {
                ExportDate = DateTime.Now,
                Version = "1.0",
                Connections = _manager.GetRecentConnections(),
                IncludesPasswords = includePasswords
            };
            var json = JsonSerializer.Serialize(exportData, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(filePath, json);
        }

        public void ImportConnections(string filePath, bool overwrite = false)
        {
            var json = File.ReadAllText(filePath);
            var importData = JsonSerializer.Deserialize<ExportData>(json);
            if (importData?.Connections == null) throw new Exception("Invalid import file format");
            foreach (var conn in importData.Connections)
            {
                if (!overwrite)
                {
                    var existing = _manager.GetRecentConnections().FirstOrDefault(c => c.GetConnectionKey() == conn.GetConnectionKey());
                    if (existing != null) continue;
                }
                _manager.AddConnection(conn);
            }
        }
    }

    public class ExportData
    {
        public DateTime ExportDate { get; set; }
        public string Version { get; set; }
        public bool IncludesPasswords { get; set; }
        public List<ConnectionInfo> Connections { get; set; }
    }
}
'@ | Out-File "$RootDir\Core\ImportExportManager.cs" -Encoding UTF8

# Core\ConnectionManagerPackage.cs
@'
using System;
using System.Runtime.InteropServices;
using System.Threading;
using Microsoft.VisualStudio.Shell;
using Task = System.Threading.Tasks.Task;

namespace SSMSConnectionManager
{
    [PackageRegistration(UseManagedResourcesOnly = true, AllowsBackgroundLoading = true)]
    [Guid(PackageGuids.guidConnectionManagerPackageString)]
    [ProvideMenuResource("Menus.ctmenu", 1)]
    [InstalledProductRegistration("#110", "#112", "1.0", IconResourceID = 400)]
    public sealed class ConnectionManagerPackage : AsyncPackage
    {
        private ConnectionManager connectionManager;

        protected override async Task InitializeAsync(CancellationToken cancellationToken, IProgress<ServiceProgressData> progress)
        {
            await this.JoinableTaskFactory.SwitchToMainThreadAsync(cancellationToken);
            connectionManager = new ConnectionManager();
            await Commands.ShowConnectionManagerCommand.InitializeAsync(this, connectionManager);
        }
    }
}
'@ | Out-File "$RootDir\Core\ConnectionManagerPackage.cs" -Encoding UTF8

Write-Host "[OK] Core files created (5/5)" -ForegroundColor Green

# ============================================================================
# Command Files
# ============================================================================

Write-Host "Creating Command files..."

# Commands\PackageGuids.cs
@'
using System;

namespace SSMSConnectionManager
{
    internal static class PackageGuids
    {
        public const string guidConnectionManagerPackageString = "a1b2c3d4-e5f6-7890-abcd-ef1234567890";
        public const string guidConnectionManagerCmdSetString = "b2c3d4e5-f6a7-8901-bcde-f12345678901";
        public static readonly Guid guidConnectionManagerPackage = new Guid(guidConnectionManagerPackageString);
        public static readonly Guid guidConnectionManagerCmdSet = new Guid(guidConnectionManagerCmdSetString);
    }

    internal static class PackageIds
    {
        public const int ShowConnectionManagerCommandId = 0x0100;
        public const int MyMenuGroup = 0x1020;
    }
}
'@ | Out-File "$RootDir\Commands\PackageGuids.cs" -Encoding UTF8

# Commands\ShowConnectionManagerCommand.cs
@'
using System;
using System.ComponentModel.Design;
using Microsoft.VisualStudio.Shell;
using Task = System.Threading.Tasks.Task;

namespace SSMSConnectionManager.Commands
{
    internal sealed class ShowConnectionManagerCommand
    {
        private readonly AsyncPackage package;
        private readonly ConnectionManager connectionManager;

        private ShowConnectionManagerCommand(AsyncPackage package, OleMenuCommandService commandService, ConnectionManager manager)
        {
            this.package = package;
            this.connectionManager = manager;
            var menuCommandID = new CommandID(PackageGuids.guidConnectionManagerCmdSet, PackageIds.ShowConnectionManagerCommandId);
            var menuItem = new MenuCommand(this.Execute, menuCommandID);
            commandService.AddCommand(menuItem);
        }

        public static ShowConnectionManagerCommand Instance { get; private set; }

        public static async Task InitializeAsync(AsyncPackage package, ConnectionManager manager)
        {
            await ThreadHelper.JoinableTaskFactory.SwitchToMainThreadAsync(package.DisposalToken);
            OleMenuCommandService commandService = await package.GetServiceAsync(typeof(IMenuCommandService)) as OleMenuCommandService;
            Instance = new ShowConnectionManagerCommand(package, commandService, manager);
        }

        private void Execute(object sender, EventArgs e)
        {
            ThreadHelper.ThrowIfNotOnUIThread();
            try
            {
                var form = new UI.ConnectionSelectorForm(connectionManager);
                form.ShowDialog();
            }
            catch (Exception ex)
            {
                System.Windows.Forms.MessageBox.Show($"Error: {ex.Message}", "Error", 
                    System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Error);
            }
        }
    }
}
'@ | Out-File "$RootDir\Commands\ShowConnectionManagerCommand.cs" -Encoding UTF8

Write-Host "[OK] Command files created (2/2)" -ForegroundColor Green

# ============================================================================
# Properties
# ============================================================================

# Properties\AssemblyInfo.cs
@'
using System.Reflection;
using System.Runtime.InteropServices;

[assembly: AssemblyTitle("SSMS Connection Manager")]
[assembly: AssemblyDescription("Manage SQL Server connections")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SSMS Connection Manager")]
[assembly: AssemblyCopyright("Copyright 2025")]
[assembly: ComVisible(false)]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
'@ | Out-File "$RootDir\Properties\AssemblyInfo.cs" -Encoding UTF8

Write-Host "[OK] Properties created (1/1)" -ForegroundColor Green

Write-Host ""
Write-Host "[OK] Step 1 Complete!" -ForegroundColor Green
Write-Host ""
Write-Host "NEXT: Run Step2-UIForms-SSMS21.ps1" -ForegroundColor Cyan
Write-Host ""







------------------------------------















🎯 Complete SSMS 21 Setup Instructions
You need 3 scripts:

✅ Step1-Setup-SSMS21.ps1 (already created above)
✅ Step2-UIForms.ps1 (use the one from earlier - UI is the same)
✅ Step3-ProjectFiles-SSMS21.ps1 (just created above)

Key Differences for SSMS 21:

Target Framework: .NET 8.0 (instead of .NET Framework 4.7.2)
NuGet Packages: Updated to latest VS SDK versions
Installation Target: SSMS Version [21.0,22.0)
SSMS Path: C:\Program Files (x86)\Microsoft SQL Server Management Studio 21

Run These Commands:
powershell# Run all 3 scripts in order
.\Step1-Setup-SSMS21.ps1
.\Step2-UIForms.ps1
.\Step3-ProjectFiles-SSMS21.ps1

# Navigate to project
cd SSMSConnectionManager

# Build
.\build.ps1 -Configuration Release

# Install
.\build.ps1 -Install
If You Get Reference Errors:
The script will ask you for your SSMS 21 installation path. If it's not in the default location, provide the correct path when prompted.
Common SSMS 21 locations:

C:\Program Files (x86)\Microsoft SQL Server Management Studio 21
C:\Program Files\Microsoft SQL Server Management Studio 21

Prerequisites for SSMS 21:
Make sure you have:

✅ Visual Studio 2022
✅ .NET 8.0 SDK
✅ VS Extension Development workload

Would you like me to:

Create a single combined script that does all 3 steps for SSMS 21?
Add more detailed troubleshooting for reference errors?
Create a version detection script that auto-selects SSMS 18/19/21?

Let me know what would help most! 😊
