---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

-- Helper function to check if the value is numeric
CREATE OR ALTER FUNCTION dbo.IsNumericOnly (@Value NVARCHAR(MAX))
RETURNS BIT
AS
BEGIN
    RETURN CASE 
        WHEN @Value LIKE '%[^0-9.]%' THEN 0 -- Non-numeric characters
        ELSE 1 -- Numeric
    END
END
GO

-- Helper function to detect if the value is a valid date (DATE or DATETIME)
CREATE OR ALTER FUNCTION dbo.IsDateFormat (@Value NVARCHAR(MAX))
RETURNS BIT
AS
BEGIN
    -- Check if the value matches DATE or DATETIME format (YYYY-MM-DD or YYYY-MM-DD HH:MI:SS)
    RETURN CASE
        WHEN @Value LIKE '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]' 
            OR @Value LIKE '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9]' 
        THEN 1
        ELSE 0
    END
END
GO

-- Helper function to split values from a comma-separated string
CREATE OR ALTER FUNCTION dbo.SplitValues (@List NVARCHAR(MAX), @Delimiter CHAR(1))
RETURNS @Output TABLE (Item NVARCHAR(MAX))
AS
BEGIN
    DECLARE @Start INT = 1, @End INT
    WHILE CHARINDEX(@Delimiter, @List, @Start) > 0
    BEGIN
        SET @End = CHARINDEX(@Delimiter, @List, @Start)
        INSERT INTO @Output (Item)
        SELECT LTRIM(RTRIM(SUBSTRING(@List, @Start, @End - @Start)))
        SET @Start = @End + 1
    END
    INSERT INTO @Output (Item)
    SELECT LTRIM(RTRIM(SUBSTRING(@List, @Start, LEN(@List) - @Start + 1)))
    RETURN
END
GO

-- Table variable to store the filter conditions
DECLARE @Filters TABLE (
    ID INT IDENTITY PRIMARY KEY,
    ColumnName NVARCHAR(255),
    Operator NVARCHAR(50),
    Value1 NVARCHAR(MAX),
    Value2 NVARCHAR(MAX) NULL,
    ConditionType NVARCHAR(10) DEFAULT 'AND',
    BracketLevel INT DEFAULT 0
)

-- Step 1: Insert conditions from the WHERE clause into the @Filters table
-- For demonstration purposes, we'll assume the WHERE clause string is in a specific format

DECLARE @WhereClause NVARCHAR(MAX) = 'CreatedDate >= ''2025-05-01'' AND ModifiedDate <= ''2025-05-15 12:00:00'' AND Age = 30 AND Name LIKE ''John%'' AND Country IN (''Germany'', ''USA'', ''Canada'')'

-- Clear the @Filters table before inserting new data
DELETE FROM @Filters

-- Sample data (manually insert from WHERE clause)
-- In real scenarios, this would be parsed dynamically from the @WhereClause string
INSERT INTO @Filters (ColumnName, Operator, Value1, Value2, ConditionType, BracketLevel)
VALUES
    ('CreatedDate', '>=', '2025-05-01', NULL, 'AND', 1),
    ('ModifiedDate', '<=', '2025-05-15 12:00:00', NULL, 'AND', 1),
    ('Age', '=', '30', NULL, 'AND', 1),
    ('Name', 'LIKE', 'John%', NULL, 'AND', 1),
    ('Country', 'IN', 'Germany,USA,Canada', NULL, 'AND', 1)

-- Step 2: Reverse Builder - Reconstruct WHERE clause from @Filters table

DECLARE @DynamicWhere NVARCHAR(MAX) = '' -- Initialize the dynamic WHERE clause

-- Construct the WHERE clause based on the data in the @Filters table
SELECT @DynamicWhere = @DynamicWhere +
    -- Add opening bracket when necessary based on the bracket level
    CASE WHEN BracketLevel > ISNULL(LAG(BracketLevel) OVER (ORDER BY ID), BracketLevel) THEN '(' ELSE '' END +
    -- Add logical condition (AND/OR) between filters
    CASE WHEN ID > 1 THEN ' ' + ConditionType + ' ' ELSE '' END +
    -- Handle the different operators (IS NULL, IN, BETWEEN, etc.)
    CASE 
        -- Handle IS NULL and IS NOT NULL
        WHEN Operator = 'IS NULL' OR Operator = 'IS NOT NULL'
            THEN ColumnName + ' ' + Operator
        
        -- Handle BETWEEN operator (with correct value formatting)
        WHEN Operator = 'BETWEEN'
            THEN ColumnName + ' BETWEEN ' + 
                CASE WHEN dbo.IsNumericOnly(Value1) = 1 THEN Value1 
                     WHEN dbo.IsDateFormat(Value1) = 1 THEN QUOTENAME(LTRIM(RTRIM(Value1)), '''') -- Quote date values
                     ELSE QUOTENAME(LTRIM(RTRIM(Value1)), '''') END
                + ' AND ' +
                CASE WHEN dbo.IsNumericOnly(Value2) = 1 THEN Value2 
                     WHEN dbo.IsDateFormat(Value2) = 1 THEN QUOTENAME(LTRIM(RTRIM(Value2)), '''') -- Quote date values
                     ELSE QUOTENAME(LTRIM(RTRIM(Value2)), '''') END
        
        -- Handle IN/NOT IN operator (with value formatting)
        WHEN Operator IN ('IN', 'NOT IN')
            THEN 
            ColumnName + ' ' + Operator + ' (' +
                STRING_AGG(
                    CASE 
                        WHEN dbo.IsNumericOnly(Item) = 1 THEN Item
                        WHEN dbo.IsDateFormat(Item) = 1 THEN QUOTENAME(Item, '''') -- Quote date values inside IN
                        ELSE QUOTENAME(Item, '''') -- Quote string values inside IN
                    END, 
                ',')
            WITHIN GROUP (ORDER BY (SELECT NULL)) 
            FROM dbo.SplitValues(
                REPLACE(REPLACE(Value1, '(', ''), ')', ''), -- Clean any stray brackets
                ','
            )
            +
            ')'
        
        -- Handle other operators (e.g., '=', '<>', '>', '<', LIKE)
        ELSE ColumnName + ' ' + Operator + ' ' + 
            CASE WHEN dbo.IsNumericOnly(Value1) = 1 THEN Value1 
                 WHEN dbo.IsDateFormat(Value1) = 1 THEN QUOTENAME(LTRIM(RTRIM(Value1)), '''') -- Quote date values
                 ELSE QUOTENAME(LTRIM(RTRIM(Value1)), '''') END
    END +
    -- Add closing bracket when necessary
    CASE WHEN BracketLevel < ISNULL(LEAD(BracketLevel) OVER (ORDER BY ID), BracketLevel) THEN ')' ELSE '' END
FROM @Filters
ORDER BY ID

-- Final Query Construction (SELECT with WHERE clause)
DECLARE @TableName NVARCHAR(MAX) = 'Customers' -- Your table name
DECLARE @FinalQuery NVARCHAR(MAX) = 'SELECT * FROM ' + @TableName + ' WHERE ' + @DynamicWhere

-- Output the final query for inspection
PRINT @FinalQuery



---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------


Steps Overview:
Insert WHERE Clause into @Filters Table:

Manually insert data into the @Filters table from the provided WHERE clause string.

The @Filters table stores the conditions in a structured format, including the column name, operator, value, and condition type.

Reverse Builder:

Reconstructs the dynamic WHERE clause using the data in the @Filters table.

This "reverse builder" dynamically builds the conditions, handling:

Different operators like =, >, <, IN, LIKE, BETWEEN, etc.

Proper formatting for date and numeric values (i.e., quoting strings and dates).

Logical operators (AND, OR) based on the condition type in the @Filters table.

Final Query:

Combines the dynamically constructed WHERE clause with a SELECT * query to create the final query string.

Outputs the final query using PRINT.


---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------



Sample Output:
Given the example WHERE clause:

sql
Copy
Edit
CreatedDate >= '2025-05-01' AND ModifiedDate <= '2025-05-15 12:00:00' AND Age = 30 AND Name LIKE 'John%' AND Country IN ('Germany', 'USA', 'Canada')
The output query will be:

sql
Copy
Edit
SELECT * FROM Customers 
WHERE CreatedDate >= N'2025-05-01' 
    AND ModifiedDate <= N'2025-05-15 12:00:00' 
    AND Age = 30 
    AND Name LIKE 'John%' 
    AND Country IN (N'Germany', N'USA', N'Canada')
Customization:
Where Clause Parsing: In this example, we manually populate the @Filters table. You can implement a parser to automatically process a given WHERE clause string and insert the conditions into the table.

Table Name: Adjust the @TableName variable to reflect the table you're querying against


@@@@@@@@

CREATE OR ALTER PROCEDURE ParseToken
    @Token NVARCHAR(MAX),
    @BracketLevel INT,
    @ConditionType NVARCHAR(10)
AS
BEGIN
    DECLARE @Column NVARCHAR(100), @Operator NVARCHAR(30), @Val1 NVARCHAR(MAX), @Val2 NVARCHAR(MAX)

    -- IS NULL
    IF CHARINDEX(' IS NULL', @Token) > 0
    BEGIN
        SET @Column = LTRIM(RTRIM(LEFT(@Token, CHARINDEX('IS NULL', @Token)-1)))
        SET @Operator = 'IS NULL'
    END
    -- IS NOT NULL
    ELSE IF CHARINDEX(' IS NOT NULL', @Token) > 0
    BEGIN
        SET @Column = LTRIM(RTRIM(LEFT(@Token, CHARINDEX('IS NOT NULL', @Token)-1)))
        SET @Operator = 'IS NOT NULL'
    END
    -- BETWEEN
    ELSE IF CHARINDEX(' BETWEEN ', @Token) > 0
    BEGIN
        SET @Column = LTRIM(RTRIM(LEFT(@Token, CHARINDEX('BETWEEN', @Token)-1)))
        DECLARE @Temp NVARCHAR(MAX) = SUBSTRING(@Token, CHARINDEX('BETWEEN', @Token) + 7, LEN(@Token))
        SET @Val1 = LTRIM(RTRIM(LEFT(@Temp, CHARINDEX('AND', @Temp)-1)))
        SET @Val2 = LTRIM(RTRIM(SUBSTRING(@Temp, CHARINDEX('AND', @Temp)+3, LEN(@Temp))))
        SET @Operator = 'BETWEEN'
    END
    -- NOT IN
    ELSE IF CHARINDEX(' NOT IN ', @Token) > 0
    BEGIN
        SET @Column = LTRIM(RTRIM(LEFT(@Token, CHARINDEX('NOT IN', @Token)-1)))
        SET @Operator = 'NOT IN'
        SET @Val1 = SUBSTRING(@Token, CHARINDEX('NOT IN', @Token) + 6, LEN(@Token))
    END
    -- IN
    ELSE IF CHARINDEX(' IN ', @Token) > 0
    BEGIN
        SET @Column = LTRIM(RTRIM(LEFT(@Token, CHARINDEX('IN', @Token)-1)))
        SET @Operator = 'IN'
        SET @Val1 = SUBSTRING(@Token, CHARINDEX('IN', @Token) + 2, LEN(@Token))
    END
    -- LIKE
    ELSE IF CHARINDEX(' LIKE ', @Token) > 0
    BEGIN
        SET @Column = LTRIM(RTRIM(LEFT(@Token, CHARINDEX('LIKE', @Token)-1)))
        SET @Operator = 'LIKE'
        SET @Val1 = SUBSTRING(@Token, CHARINDEX('LIKE', @Token) + 4, LEN(@Token))
    END
    -- >=
    ELSE IF CHARINDEX('>=', @Token) > 0
    BEGIN
        SET @Column = LTRIM(RTRIM(LEFT(@Token, CHARINDEX('>=', @Token)-1)))
        SET @Operator = '>='
        SET @Val1 = SUBSTRING(@Token, CHARINDEX('>=', @Token) + 2, LEN(@Token))
    END
    -- <=
    ELSE IF CHARINDEX('<=', @Token) > 0
    BEGIN
        SET @Column = LTRIM(RTRIM(LEFT(@Token, CHARINDEX('<=', @Token)-1)))
        SET @Operator = '<='
        SET @Val1 = SUBSTRING(@Token, CHARINDEX('<=', @Token) + 2, LEN(@Token))
    END
    -- >
    ELSE IF CHARINDEX('>', @Token) > 0
    BEGIN
        SET @Column = LTRIM(RTRIM(LEFT(@Token, CHARINDEX('>', @Token)-1)))
        SET @Operator = '>'
        SET @Val1 = SUBSTRING(@Token, CHARINDEX('>', @Token) + 1, LEN(@Token))
    END
    -- <
    ELSE IF CHARINDEX('<', @Token) > 0
    BEGIN
        SET @Column = LTRIM(RTRIM(LEFT(@Token, CHARINDEX('<', @Token)-1)))
        SET @Operator = '<'
        SET @Val1 = SUBSTRING(@Token, CHARINDEX('<', @Token) + 1, LEN(@Token))
    END
    -- <>
    ELSE IF CHARINDEX('<>', @Token) > 0
    BEGIN
        SET @Column = LTRIM(RTRIM(LEFT(@Token, CHARINDEX('<>', @Token)-1)))
        SET @Operator = '<>'
        SET @Val1 = SUBSTRING(@Token, CHARINDEX('<>', @Token) + 2, LEN(@Token))
    END
    -- =
    ELSE IF CHARINDEX('=', @Token) > 0
    BEGIN
        SET @Column = LTRIM(RTRIM(LEFT(@Token, CHARINDEX('=', @Token)-1)))
        SET @Operator = '='
        SET @Val1 = SUBSTRING(@Token, CHARINDEX('=', @Token) + 1, LEN(@Token))
    END

    -- Insert into Filters
    INSERT INTO @Filters (BracketLevel, ConditionType, ColumnName, Operator, Value1, Value2)
    VALUES (@BracketLevel, @ConditionType, @Column, @Operator, @Val1, @Val2)
END





@@@@@@


CREATE TYPE dbo.FilterTableType AS TABLE (
    ID INT IDENTITY(1,1),
    BracketLevel INT,
    ConditionType NVARCHAR(10),
    ColumnName NVARCHAR(255),
    Operator NVARCHAR(20),
    Value1 NVARCHAR(MAX),
    Value2 NVARCHAR(MAX) NULL
)

CREATE OR ALTER PROCEDURE dbo.ParseWhereClauseToFilters
    @WhereClause NVARCHAR(MAX),
    @Filters dbo.FilterTableType READONLY OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @BracketLevel INT = 0
    DECLARE @Token NVARCHAR(MAX)
    DECLARE @Pos INT = 1
    DECLARE @NextPos INT
    DECLARE @Length INT = LEN(@WhereClause)
    DECLARE @Delimiters NVARCHAR(20) = ' ()'

    DECLARE @Tokens TABLE (Seq INT IDENTITY, Token NVARCHAR(MAX))

    -- Tokenizer: splits based on spaces but keeps brackets and operators intact
    WHILE @Pos <= @Length
    BEGIN
        SET @NextPos = PATINDEX('%[^ ]%', SUBSTRING(@WhereClause, @Pos, 1))
        IF @NextPos = 0 BREAK

        DECLARE @Char CHAR(1) = SUBSTRING(@WhereClause, @Pos, 1)

        IF @Char IN ('(', ')')
        BEGIN
            INSERT INTO @Tokens(Token) VALUES (@Char)
            SET @Pos += 1
        END
        ELSE
        BEGIN
            DECLARE @End INT = CHARINDEX(' ', @WhereClause + ' ', @Pos)
            IF @End = 0 SET @End = @Length + 1
            SET @Token = RTRIM(LTRIM(SUBSTRING(@WhereClause, @Pos, @End - @Pos)))
            INSERT INTO @Tokens(Token) VALUES (@Token)
            SET @Pos = @End + 1
        END
    END

    -- Now parse the tokens into the @Filters table
    DECLARE 
        @Col NVARCHAR(255), @Op NVARCHAR(20),
        @Val NVARCHAR(MAX), @Cond NVARCHAR(10),
        @i INT = 1, @Max INT, @CurrentToken NVARCHAR(MAX)

    SELECT @Max = MAX(Seq) FROM @Tokens

    DECLARE @Working TABLE (BracketLevel INT, ConditionType NVARCHAR(10), ColumnName NVARCHAR(255), Operator NVARCHAR(20), Value1 NVARCHAR(MAX), Value2 NVARCHAR(MAX))

    WHILE @i <= @Max
    BEGIN
        SELECT @CurrentToken = Token FROM @Tokens WHERE Seq = @i

        IF @CurrentToken = '('
        BEGIN
            SET @BracketLevel += 1
            SET @i += 1
            CONTINUE
        END
        ELSE IF @CurrentToken = ')'
        BEGIN
            SET @BracketLevel -= 1
            SET @i += 1
            CONTINUE
        END
        ELSE IF UPPER(@CurrentToken) IN ('AND', 'OR')
        BEGIN
            SET @Cond = UPPER(@CurrentToken)
            SET @i += 1
            CONTINUE
        END

        -- Assume pattern: Column Operator Value
        DECLARE @Next1 NVARCHAR(MAX), @Next2 NVARCHAR(MAX)
        SELECT @Next1 = Token FROM @Tokens WHERE Seq = @i + 1
        SELECT @Next2 = Token FROM @Tokens WHERE Seq = @i + 2

        IF @Next1 IS NULL OR @Next2 IS NULL BREAK

        SET @Col = @CurrentToken
        SET @Op = UPPER(@Next1)

        -- Handle IN (...)
        IF @Op = 'IN' OR @Op = 'NOT'
        BEGIN
            IF @Op = 'NOT'
            BEGIN
                -- Expect 'NOT IN'
                SELECT @Next1 = Token FROM @Tokens WHERE Seq = @i + 2
                IF @Next1 <> 'IN' BREAK
                SET @Op = 'NOT IN'
                SET @i += 1 -- Advance extra
            END

            -- Expect next token to be '('
            SELECT @Next2 = Token FROM @Tokens WHERE Seq = @i + 2
            IF @Next2 <> '(' BREAK

            DECLARE @INList NVARCHAR(MAX) = ''
            SET @i += 3 -- Move past IN (

            WHILE @i <= @Max
            BEGIN
                SELECT @CurrentToken = Token FROM @Tokens WHERE Seq = @i
                IF @CurrentToken = ')' BREAK
                IF @CurrentToken <> ',' SET @INList += CASE WHEN LEN(@INList) > 0 THEN ',' ELSE '' END + @CurrentToken
                SET @i += 1
            END
            SET @i += 1 -- Move past ')'

            INSERT INTO @Filters (BracketLevel, ConditionType, ColumnName, Operator, Value1)
            VALUES (@BracketLevel, ISNULL(@Cond, 'AND'), @Col, @Op, @INList)

            SET @Cond = NULL
            CONTINUE
        END
        ELSE
        BEGIN
            -- Standard pattern: Column Operator Value
            SET @Val = @Next2
            SET @i += 3

            INSERT INTO @Filters (BracketLevel, ConditionType, ColumnName, Operator, Value1)
            VALUES (@BracketLevel, ISNULL(@Cond, 'AND'), @Col, @Op, @Val)

            SET @Cond = NULL
            CONTINUE
        END
    END
END

DECLARE @FilterResult dbo.FilterTableType

EXEC dbo.ParseWhereClauseToFilters 
    @WhereClause = '((CustomerID IN (1,2,3) AND Country = ''USA'') OR (PostalCode LIKE ''1%''))', 
    @Filters = @FilterResult OUTPUT

-- View the parsed results
SELECT * FROM @FilterResult



DECLARE @Sql NVARCHAR(MAX) = ''
DECLARE @PrevLevel INT = 0
DECLARE @CurrentLevel INT
DECLARE @Condition NVARCHAR(MAX)
DECLARE @Line NVARCHAR(MAX)
DECLARE @IsFirst BIT = 1

-- Cursor to iterate over filters
DECLARE cur CURSOR FOR
SELECT BracketLevel, ConditionType, ColumnName, Operator, Value1
FROM @FilterResult
ORDER BY ID

OPEN cur
FETCH NEXT FROM cur INTO @CurrentLevel, @Condition, @Col, @Op, @Val

WHILE @@FETCH_STATUS = 0
BEGIN
    -- Handle brackets (open)
    IF @CurrentLevel > @PrevLevel
        SET @Sql += REPLICATE('(', @CurrentLevel - @PrevLevel)

    -- Add AND/OR (skip for first condition)
    IF @IsFirst = 0
        SET @Sql += ' ' + @Condition + ' '
    ELSE
        SET @IsFirst = 0

    -- Build the condition expression
    IF @Op IN ('IN', 'NOT IN')
    BEGIN
        -- Break values into quoted list
        DECLARE @InList NVARCHAR(MAX) = ''
        SELECT @InList = STRING_AGG(
            CASE 
                WHEN TRY_CAST(value AS FLOAT) IS NULL THEN '''' + TRIM(value) + ''''
                ELSE TRIM(value)
            END, ',')
        FROM STRING_SPLIT(@Val, ',')

        SET @Line = QUOTENAME(@Col) + ' ' + @Op + ' (' + @InList + ')'
    END
    ELSE
    BEGIN
        SET @Line = QUOTENAME(@Col) + ' ' + @Op + ' ' + 
                    CASE 
                        WHEN TRY_CAST(@Val AS FLOAT) IS NULL AND LEFT(@Val,1) <> '''' THEN '''' + @Val + ''''
                        ELSE @Val 
                    END
    END

    SET @Sql += @Line

    -- Handle brackets (close)
    IF @CurrentLevel < @PrevLevel
        SET @Sql += REPLICATE(')', @PrevLevel - @CurrentLevel)

    SET @PrevLevel = @CurrentLevel
    FETCH NEXT FROM cur INTO @CurrentLevel, @Condition, @Col, @Op, @Val
END

CLOSE cur
DEALLOCATE cur

-- Close remaining brackets if any
IF @PrevLevel > 0
    SET @Sql += REPLICATE(')', @PrevLevel)

-- Final result
SELECT 'SELECT * FROM YourTable WHERE ' + @Sql AS DynamicSQL

SELECT * FROM YourTable WHERE (([CustomerID] IN (1,2,3) AND [Country] = 'USA') OR [PostalCode] LIKE '1%')

