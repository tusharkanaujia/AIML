
DROP TABLE if exists #WorkingData;
DROP TABLE if exists #AllocationResults;

-- Create a working table with row identifiers
CREATE TABLE #WorkingData (
    RowID INT IDENTITY(1,1),
    ISIN VARCHAR(50),
    Type VARCHAR(10),
    ProdLevel2 VARCHAR(100),
    ProdLevel3 VARCHAR(100),
    ProdLevel4 VARCHAR(100),
    ProdLevel5 VARCHAR(100),
    ProdLevel6 VARCHAR(100),
    ProdLevel7 VARCHAR(100),
    ProdLevel8 VARCHAR(100),
    ProdLevel9 VARCHAR(100),
    ProdLevel10 VARCHAR(100),
    ProdLevel11 VARCHAR(100),
    OriginalAmount DECIMAL(20,2),
    RemainingAmount DECIMAL(20,2)
);

-- Insert data into working table
INSERT INTO #WorkingData (ISIN, Type, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, ProdLevel11, OriginalAmount, RemainingAmount)
SELECT ISIN, Type, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, ProdLevel11, TotalAmount, TotalAmount
FROM BusinessDetails;

-- Create allocation results table
CREATE TABLE #AllocationResults (
    AllocationID INT IDENTITY(1,1),
    ISIN VARCHAR(50),
    AllocationLevel INT,
    TPARowID INT,
    TPLRowID INT,
    MatchPath VARCHAR(1000),
    TPAOriginalAmount DECIMAL(20,2),
    TPLOriginalAmount DECIMAL(20,2),
    AllocatedAmount DECIMAL(20,2),
    TPARemainingAmount DECIMAL(20,2),
    TPLRemainingAmount DECIMAL(20,2)
);

-- DEBUG: First, let's check potential matches at different levels
PRINT '';
PRINT 'Checking potential matches at each level:';

-- Check Level 7 matches (this is where EMEA Delta One Synthetics should match)
PRINT '';
PRINT 'Level 7 potential matches:';
SELECT 
    'Level7' as MatchLevel,
    tpa.ProdLevel2, tpa.ProdLevel3, tpa.ProdLevel4, tpa.ProdLevel5, 
    tpa.ProdLevel6, tpa.ProdLevel7,
    tpa.TotalAmount as TPAAmount,
    tpl.TotalAmount as TPLAmount
FROM BusinessDetails tpa
INNER JOIN BusinessDetails tpl 
    ON tpa.ISIN = tpl.ISIN
    AND tpa.ProdLevel2 = tpl.ProdLevel2
    AND tpa.ProdLevel3 = tpl.ProdLevel3
    AND tpa.ProdLevel4 = tpl.ProdLevel4
    AND tpa.ProdLevel5 = tpl.ProdLevel5
    AND tpa.ProdLevel6 = tpl.ProdLevel6
    AND tpa.ProdLevel7 = tpl.ProdLevel7
WHERE tpa.Type = 'TPA' AND tpl.Type = 'TPL'
    AND tpa.TotalAmount < 0 AND tpl.TotalAmount > 0;

-- Variables for processing
DECLARE @CurrentLevel INT = 11;
DECLARE @TotalCrossEntityAmount DECIMAL(20,2);
DECLARE @RemainingCrossEntityAmount DECIMAL(20,2);

SELECT @TotalCrossEntityAmount = GBPIFRSBalanceSheetAmount,
       @RemainingCrossEntityAmount = GBPIFRSBalanceSheetAmount
FROM CrossNetting
WHERE ISIN = 'US5949181045';

-- Process allocations from Level 11 down to Level 2
WHILE @CurrentLevel >= 2 AND @RemainingCrossEntityAmount > 0
BEGIN
    PRINT '';
    PRINT 'Processing Level ' + CAST(@CurrentLevel AS VARCHAR);
    
    -- Simplified approach: direct insert based on level
    IF @CurrentLevel = 11
    BEGIN
        -- Level 11: All levels must match (including NULLs)
        INSERT INTO #AllocationResults (ISIN, AllocationLevel, TPARowID, TPLRowID, MatchPath, 
                                       TPAOriginalAmount, TPLOriginalAmount, AllocatedAmount, 
                                       TPARemainingAmount, TPLRemainingAmount)
        SELECT 
            tpa.ISIN,
            @CurrentLevel as AllocationLevel,
            tpa.RowID as TPARowID,
            tpl.RowID as TPLRowID,
            CONCAT(ISNULL(tpa.ProdLevel2,''), '|', ISNULL(tpa.ProdLevel3,''), '|', 
                   ISNULL(tpa.ProdLevel4,''), '|', ISNULL(tpa.ProdLevel5,''), '|',
                   ISNULL(tpa.ProdLevel6,''), '|', ISNULL(tpa.ProdLevel7,''), '|',
                   ISNULL(tpa.ProdLevel8,''), '|', ISNULL(tpa.ProdLevel9,''), '|',
                   ISNULL(tpa.ProdLevel10,''), '|', ISNULL(tpa.ProdLevel11,'')) as MatchPath,
            tpa.OriginalAmount,
            tpl.OriginalAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN ABS(tpa.RemainingAmount)
                ELSE ABS(tpl.RemainingAmount)
            END as AllocatedAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN 0
                ELSE tpa.RemainingAmount + ABS(tpl.RemainingAmount)
            END as TPARemainingAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN tpl.RemainingAmount - ABS(tpa.RemainingAmount)
                ELSE 0
            END as TPLRemainingAmount
        FROM #WorkingData tpa
        INNER JOIN #WorkingData tpl ON tpa.ISIN = tpl.ISIN
            AND ISNULL(tpa.ProdLevel2,'') = ISNULL(tpl.ProdLevel2,'')
            AND ISNULL(tpa.ProdLevel3,'') = ISNULL(tpl.ProdLevel3,'')
            AND ISNULL(tpa.ProdLevel4,'') = ISNULL(tpl.ProdLevel4,'')
            AND ISNULL(tpa.ProdLevel5,'') = ISNULL(tpl.ProdLevel5,'')
            AND ISNULL(tpa.ProdLevel6,'') = ISNULL(tpl.ProdLevel6,'')
            AND ISNULL(tpa.ProdLevel7,'') = ISNULL(tpl.ProdLevel7,'')
            AND ISNULL(tpa.ProdLevel8,'') = ISNULL(tpl.ProdLevel8,'')
            AND ISNULL(tpa.ProdLevel9,'') = ISNULL(tpl.ProdLevel9,'')
            AND ISNULL(tpa.ProdLevel10,'') = ISNULL(tpl.ProdLevel10,'')
            AND ISNULL(tpa.ProdLevel11,'') = ISNULL(tpl.ProdLevel11,'')
        WHERE tpa.Type = 'TPA' 
          AND tpl.Type = 'TPL'
          AND tpa.RemainingAmount < 0
          AND tpl.RemainingAmount > 0;
    END
    ELSE IF @CurrentLevel = 10
    BEGIN
        -- Level 10: Match levels 2-10, ignore level 11
        INSERT INTO #AllocationResults (ISIN, AllocationLevel, TPARowID, TPLRowID, MatchPath, 
                                       TPAOriginalAmount, TPLOriginalAmount, AllocatedAmount, 
                                       TPARemainingAmount, TPLRemainingAmount)
        SELECT 
            tpa.ISIN,
            @CurrentLevel as AllocationLevel,
            tpa.RowID as TPARowID,
            tpl.RowID as TPLRowID,
            CONCAT(ISNULL(tpa.ProdLevel2,''), '|', ISNULL(tpa.ProdLevel3,''), '|', 
                   ISNULL(tpa.ProdLevel4,''), '|', ISNULL(tpa.ProdLevel5,''), '|',
                   ISNULL(tpa.ProdLevel6,''), '|', ISNULL(tpa.ProdLevel7,''), '|',
                   ISNULL(tpa.ProdLevel8,''), '|', ISNULL(tpa.ProdLevel9,''), '|',
                   ISNULL(tpa.ProdLevel10,'')) as MatchPath,
            tpa.OriginalAmount,
            tpl.OriginalAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN ABS(tpa.RemainingAmount)
                ELSE ABS(tpl.RemainingAmount)
            END as AllocatedAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN 0
                ELSE tpa.RemainingAmount + ABS(tpl.RemainingAmount)
            END as TPARemainingAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN tpl.RemainingAmount - ABS(tpa.RemainingAmount)
                ELSE 0
            END as TPLRemainingAmount
        FROM #WorkingData tpa
        INNER JOIN #WorkingData tpl ON tpa.ISIN = tpl.ISIN
            AND ISNULL(tpa.ProdLevel2,'') = ISNULL(tpl.ProdLevel2,'')
            AND ISNULL(tpa.ProdLevel3,'') = ISNULL(tpl.ProdLevel3,'')
            AND ISNULL(tpa.ProdLevel4,'') = ISNULL(tpl.ProdLevel4,'')
            AND ISNULL(tpa.ProdLevel5,'') = ISNULL(tpl.ProdLevel5,'')
            AND ISNULL(tpa.ProdLevel6,'') = ISNULL(tpl.ProdLevel6,'')
            AND ISNULL(tpa.ProdLevel7,'') = ISNULL(tpl.ProdLevel7,'')
            AND ISNULL(tpa.ProdLevel8,'') = ISNULL(tpl.ProdLevel8,'')
            AND ISNULL(tpa.ProdLevel9,'') = ISNULL(tpl.ProdLevel9,'')
            AND ISNULL(tpa.ProdLevel10,'') = ISNULL(tpl.ProdLevel10,'')
        WHERE tpa.Type = 'TPA' 
          AND tpl.Type = 'TPL'
          AND tpa.RemainingAmount < 0
          AND tpl.RemainingAmount > 0;
    END
    -- Continue for other levels...


	ELSE IF @CurrentLevel = 9
    BEGIN
        -- Level 10: Match levels 2-10, ignore level 11
        INSERT INTO #AllocationResults (ISIN, AllocationLevel, TPARowID, TPLRowID, MatchPath, 
                                       TPAOriginalAmount, TPLOriginalAmount, AllocatedAmount, 
                                       TPARemainingAmount, TPLRemainingAmount)
        SELECT 
            tpa.ISIN,
            @CurrentLevel as AllocationLevel,
            tpa.RowID as TPARowID,
            tpl.RowID as TPLRowID,
            CONCAT(ISNULL(tpa.ProdLevel2,''), '|', ISNULL(tpa.ProdLevel3,''), '|', 
                   ISNULL(tpa.ProdLevel4,''), '|', ISNULL(tpa.ProdLevel5,''), '|',
                   ISNULL(tpa.ProdLevel6,''), '|', ISNULL(tpa.ProdLevel7,''), '|',
                   ISNULL(tpa.ProdLevel8,''), '|', ISNULL(tpa.ProdLevel9,'')) as MatchPath,
            tpa.OriginalAmount,
            tpl.OriginalAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN ABS(tpa.RemainingAmount)
                ELSE ABS(tpl.RemainingAmount)
            END as AllocatedAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN 0
                ELSE tpa.RemainingAmount + ABS(tpl.RemainingAmount)
            END as TPARemainingAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN tpl.RemainingAmount - ABS(tpa.RemainingAmount)
                ELSE 0
            END as TPLRemainingAmount
        FROM #WorkingData tpa
        INNER JOIN #WorkingData tpl ON tpa.ISIN = tpl.ISIN
            AND ISNULL(tpa.ProdLevel2,'') = ISNULL(tpl.ProdLevel2,'')
            AND ISNULL(tpa.ProdLevel3,'') = ISNULL(tpl.ProdLevel3,'')
            AND ISNULL(tpa.ProdLevel4,'') = ISNULL(tpl.ProdLevel4,'')
            AND ISNULL(tpa.ProdLevel5,'') = ISNULL(tpl.ProdLevel5,'')
            AND ISNULL(tpa.ProdLevel6,'') = ISNULL(tpl.ProdLevel6,'')
            AND ISNULL(tpa.ProdLevel7,'') = ISNULL(tpl.ProdLevel7,'')
            AND ISNULL(tpa.ProdLevel8,'') = ISNULL(tpl.ProdLevel8,'')
            AND ISNULL(tpa.ProdLevel9,'') = ISNULL(tpl.ProdLevel9,'')
        WHERE tpa.Type = 'TPA' 
          AND tpl.Type = 'TPL'
          AND tpa.RemainingAmount < 0
          AND tpl.RemainingAmount > 0;
    END
    -- Continue for other levels...

	

	ELSE IF @CurrentLevel = 8
    BEGIN
        -- Level 10: Match levels 2-10, ignore level 11
        INSERT INTO #AllocationResults (ISIN, AllocationLevel, TPARowID, TPLRowID, MatchPath, 
                                       TPAOriginalAmount, TPLOriginalAmount, AllocatedAmount, 
                                       TPARemainingAmount, TPLRemainingAmount)
        SELECT 
            tpa.ISIN,
            @CurrentLevel as AllocationLevel,
            tpa.RowID as TPARowID,
            tpl.RowID as TPLRowID,
            CONCAT(ISNULL(tpa.ProdLevel2,''), '|', ISNULL(tpa.ProdLevel3,''), '|', 
                   ISNULL(tpa.ProdLevel4,''), '|', ISNULL(tpa.ProdLevel5,''), '|',
                   ISNULL(tpa.ProdLevel6,''), '|', ISNULL(tpa.ProdLevel7,''), '|',
                   ISNULL(tpa.ProdLevel8,'')) as MatchPath,
            tpa.OriginalAmount,
            tpl.OriginalAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN ABS(tpa.RemainingAmount)
                ELSE ABS(tpl.RemainingAmount)
            END as AllocatedAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN 0
                ELSE tpa.RemainingAmount + ABS(tpl.RemainingAmount)
            END as TPARemainingAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN tpl.RemainingAmount - ABS(tpa.RemainingAmount)
                ELSE 0
            END as TPLRemainingAmount
        FROM #WorkingData tpa
        INNER JOIN #WorkingData tpl ON tpa.ISIN = tpl.ISIN
            AND ISNULL(tpa.ProdLevel2,'') = ISNULL(tpl.ProdLevel2,'')
            AND ISNULL(tpa.ProdLevel3,'') = ISNULL(tpl.ProdLevel3,'')
            AND ISNULL(tpa.ProdLevel4,'') = ISNULL(tpl.ProdLevel4,'')
            AND ISNULL(tpa.ProdLevel5,'') = ISNULL(tpl.ProdLevel5,'')
            AND ISNULL(tpa.ProdLevel6,'') = ISNULL(tpl.ProdLevel6,'')
            AND ISNULL(tpa.ProdLevel7,'') = ISNULL(tpl.ProdLevel7,'')
            AND ISNULL(tpa.ProdLevel8,'') = ISNULL(tpl.ProdLevel8,'')
        WHERE tpa.Type = 'TPA' 
          AND tpl.Type = 'TPL'
          AND tpa.RemainingAmount < 0
          AND tpl.RemainingAmount > 0;
    END
    -- Continue for other levels...


    ELSE IF @CurrentLevel = 7
    BEGIN
        -- Level 7: Match levels 2-7 (this should catch EMEA Delta One Synthetics)
        INSERT INTO #AllocationResults (ISIN, AllocationLevel, TPARowID, TPLRowID, MatchPath, 
                                       TPAOriginalAmount, TPLOriginalAmount, AllocatedAmount, 
                                       TPARemainingAmount, TPLRemainingAmount)
        SELECT 
            tpa.ISIN,
            @CurrentLevel as AllocationLevel,
            tpa.RowID as TPARowID,
            tpl.RowID as TPLRowID,
            CONCAT(ISNULL(tpa.ProdLevel2,''), '|', ISNULL(tpa.ProdLevel3,''), '|', 
                   ISNULL(tpa.ProdLevel4,''), '|', ISNULL(tpa.ProdLevel5,''), '|',
                   ISNULL(tpa.ProdLevel6,''), '|', ISNULL(tpa.ProdLevel7,'')) as MatchPath,
            tpa.OriginalAmount,
            tpl.OriginalAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN ABS(tpa.RemainingAmount)
                ELSE ABS(tpl.RemainingAmount)
            END as AllocatedAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN 0
                ELSE tpa.RemainingAmount + ABS(tpl.RemainingAmount)
            END as TPARemainingAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN tpl.RemainingAmount - ABS(tpa.RemainingAmount)
                ELSE 0
            END as TPLRemainingAmount
        FROM #WorkingData tpa
        INNER JOIN #WorkingData tpl ON tpa.ISIN = tpl.ISIN
            AND ISNULL(tpa.ProdLevel2,'') = ISNULL(tpl.ProdLevel2,'')
            AND ISNULL(tpa.ProdLevel3,'') = ISNULL(tpl.ProdLevel3,'')
            AND ISNULL(tpa.ProdLevel4,'') = ISNULL(tpl.ProdLevel4,'')
            AND ISNULL(tpa.ProdLevel5,'') = ISNULL(tpl.ProdLevel5,'')
            AND ISNULL(tpa.ProdLevel6,'') = ISNULL(tpl.ProdLevel6,'')
            AND ISNULL(tpa.ProdLevel7,'') = ISNULL(tpl.ProdLevel7,'')
        WHERE tpa.Type = 'TPA' 
          AND tpl.Type = 'TPL'
          AND tpa.RemainingAmount < 0
          AND tpl.RemainingAmount > 0;
    END

	
    ELSE IF @CurrentLevel = 6
    BEGIN
        -- Level 7: Match levels 2-7 (this should catch EMEA Delta One Synthetics)
        INSERT INTO #AllocationResults (ISIN, AllocationLevel, TPARowID, TPLRowID, MatchPath, 
                                       TPAOriginalAmount, TPLOriginalAmount, AllocatedAmount, 
                                       TPARemainingAmount, TPLRemainingAmount)
        SELECT 
            tpa.ISIN,
            @CurrentLevel as AllocationLevel,
            tpa.RowID as TPARowID,
            tpl.RowID as TPLRowID,
            CONCAT(ISNULL(tpa.ProdLevel2,''), '|', ISNULL(tpa.ProdLevel3,''), '|', 
                   ISNULL(tpa.ProdLevel4,''), '|', ISNULL(tpa.ProdLevel5,''), '|',
                   ISNULL(tpa.ProdLevel6,'')) as MatchPath,
            tpa.OriginalAmount,
            tpl.OriginalAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN ABS(tpa.RemainingAmount)
                ELSE ABS(tpl.RemainingAmount)
            END as AllocatedAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN 0
                ELSE tpa.RemainingAmount + ABS(tpl.RemainingAmount)
            END as TPARemainingAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN tpl.RemainingAmount - ABS(tpa.RemainingAmount)
                ELSE 0
            END as TPLRemainingAmount
        FROM #WorkingData tpa
        INNER JOIN #WorkingData tpl ON tpa.ISIN = tpl.ISIN
            AND ISNULL(tpa.ProdLevel2,'') = ISNULL(tpl.ProdLevel2,'')
            AND ISNULL(tpa.ProdLevel3,'') = ISNULL(tpl.ProdLevel3,'')
            AND ISNULL(tpa.ProdLevel4,'') = ISNULL(tpl.ProdLevel4,'')
            AND ISNULL(tpa.ProdLevel5,'') = ISNULL(tpl.ProdLevel5,'')
            AND ISNULL(tpa.ProdLevel6,'') = ISNULL(tpl.ProdLevel6,'')
        WHERE tpa.Type = 'TPA' 
          AND tpl.Type = 'TPL'
          AND tpa.RemainingAmount < 0
          AND tpl.RemainingAmount > 0;
    END

	
    ELSE IF @CurrentLevel = 5
    BEGIN
        -- Level 7: Match levels 2-7 (this should catch EMEA Delta One Synthetics)
        INSERT INTO #AllocationResults (ISIN, AllocationLevel, TPARowID, TPLRowID, MatchPath, 
                                       TPAOriginalAmount, TPLOriginalAmount, AllocatedAmount, 
                                       TPARemainingAmount, TPLRemainingAmount)
        SELECT 
            tpa.ISIN,
            @CurrentLevel as AllocationLevel,
            tpa.RowID as TPARowID,
            tpl.RowID as TPLRowID,
            CONCAT(ISNULL(tpa.ProdLevel2,''), '|', ISNULL(tpa.ProdLevel3,''), '|', 
                   ISNULL(tpa.ProdLevel4,''), '|', ISNULL(tpa.ProdLevel5,'')) as MatchPath,
            tpa.OriginalAmount,
            tpl.OriginalAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN ABS(tpa.RemainingAmount)
                ELSE ABS(tpl.RemainingAmount)
            END as AllocatedAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN 0
                ELSE tpa.RemainingAmount + ABS(tpl.RemainingAmount)
            END as TPARemainingAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN tpl.RemainingAmount - ABS(tpa.RemainingAmount)
                ELSE 0
            END as TPLRemainingAmount
        FROM #WorkingData tpa
        INNER JOIN #WorkingData tpl ON tpa.ISIN = tpl.ISIN
            AND ISNULL(tpa.ProdLevel2,'') = ISNULL(tpl.ProdLevel2,'')
            AND ISNULL(tpa.ProdLevel3,'') = ISNULL(tpl.ProdLevel3,'')
            AND ISNULL(tpa.ProdLevel4,'') = ISNULL(tpl.ProdLevel4,'')
            AND ISNULL(tpa.ProdLevel5,'') = ISNULL(tpl.ProdLevel5,'')
        WHERE tpa.Type = 'TPA' 
          AND tpl.Type = 'TPL'
          AND tpa.RemainingAmount < 0
          AND tpl.RemainingAmount > 0;
    END


	
    ELSE IF @CurrentLevel = 4
    BEGIN
        -- Level 7: Match levels 2-7 (this should catch EMEA Delta One Synthetics)
        INSERT INTO #AllocationResults (ISIN, AllocationLevel, TPARowID, TPLRowID, MatchPath, 
                                       TPAOriginalAmount, TPLOriginalAmount, AllocatedAmount, 
                                       TPARemainingAmount, TPLRemainingAmount)
        SELECT 
            tpa.ISIN,
            @CurrentLevel as AllocationLevel,
            tpa.RowID as TPARowID,
            tpl.RowID as TPLRowID,
            CONCAT(ISNULL(tpa.ProdLevel2,''), '|', ISNULL(tpa.ProdLevel3,''), '|', 
                   ISNULL(tpa.ProdLevel4,'')) as MatchPath,
            tpa.OriginalAmount,
            tpl.OriginalAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN ABS(tpa.RemainingAmount)
                ELSE ABS(tpl.RemainingAmount)
            END as AllocatedAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN 0
                ELSE tpa.RemainingAmount + ABS(tpl.RemainingAmount)
            END as TPARemainingAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN tpl.RemainingAmount - ABS(tpa.RemainingAmount)
                ELSE 0
            END as TPLRemainingAmount
        FROM #WorkingData tpa
        INNER JOIN #WorkingData tpl ON tpa.ISIN = tpl.ISIN
            AND ISNULL(tpa.ProdLevel2,'') = ISNULL(tpl.ProdLevel2,'')
            AND ISNULL(tpa.ProdLevel3,'') = ISNULL(tpl.ProdLevel3,'')
            AND ISNULL(tpa.ProdLevel4,'') = ISNULL(tpl.ProdLevel4,'')
        WHERE tpa.Type = 'TPA' 
          AND tpl.Type = 'TPL'
          AND tpa.RemainingAmount < 0
          AND tpl.RemainingAmount > 0;
    END

	
	
    ELSE IF @CurrentLevel = 3
    BEGIN
        -- Level 7: Match levels 2-7 (this should catch EMEA Delta One Synthetics)
        INSERT INTO #AllocationResults (ISIN, AllocationLevel, TPARowID, TPLRowID, MatchPath, 
                                       TPAOriginalAmount, TPLOriginalAmount, AllocatedAmount, 
                                       TPARemainingAmount, TPLRemainingAmount)
        SELECT 
            tpa.ISIN,
            @CurrentLevel as AllocationLevel,
            tpa.RowID as TPARowID,
            tpl.RowID as TPLRowID,
            CONCAT(ISNULL(tpa.ProdLevel2,''), '|', ISNULL(tpa.ProdLevel3,'')) as MatchPath,
            tpa.OriginalAmount,
            tpl.OriginalAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN ABS(tpa.RemainingAmount)
                ELSE ABS(tpl.RemainingAmount)
            END as AllocatedAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN 0
                ELSE tpa.RemainingAmount + ABS(tpl.RemainingAmount)
            END as TPARemainingAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN tpl.RemainingAmount - ABS(tpa.RemainingAmount)
                ELSE 0
            END as TPLRemainingAmount
        FROM #WorkingData tpa
        INNER JOIN #WorkingData tpl ON tpa.ISIN = tpl.ISIN
            AND ISNULL(tpa.ProdLevel2,'') = ISNULL(tpl.ProdLevel2,'')
            AND ISNULL(tpa.ProdLevel3,'') = ISNULL(tpl.ProdLevel3,'')
        WHERE tpa.Type = 'TPA' 
          AND tpl.Type = 'TPL'
          AND tpa.RemainingAmount < 0
          AND tpl.RemainingAmount > 0;
    END

	
	
    ELSE IF @CurrentLevel = 2
    BEGIN
        -- Level 7: Match levels 2-7 (this should catch EMEA Delta One Synthetics)
        INSERT INTO #AllocationResults (ISIN, AllocationLevel, TPARowID, TPLRowID, MatchPath, 
                                       TPAOriginalAmount, TPLOriginalAmount, AllocatedAmount, 
                                       TPARemainingAmount, TPLRemainingAmount)
        SELECT 
            tpa.ISIN,
            @CurrentLevel as AllocationLevel,
            tpa.RowID as TPARowID,
            tpl.RowID as TPLRowID,
            CONCAT(ISNULL(tpa.ProdLevel2,''), '') as MatchPath,
            tpa.OriginalAmount,
            tpl.OriginalAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN ABS(tpa.RemainingAmount)
                ELSE ABS(tpl.RemainingAmount)
            END as AllocatedAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN 0
                ELSE tpa.RemainingAmount + ABS(tpl.RemainingAmount)
            END as TPARemainingAmount,
            CASE 
                WHEN ABS(tpa.RemainingAmount) <= ABS(tpl.RemainingAmount) THEN tpl.RemainingAmount - ABS(tpa.RemainingAmount)
                ELSE 0
            END as TPLRemainingAmount
        FROM #WorkingData tpa
        INNER JOIN #WorkingData tpl ON tpa.ISIN = tpl.ISIN
            AND ISNULL(tpa.ProdLevel2,'') = ISNULL(tpl.ProdLevel2,'')
        WHERE tpa.Type = 'TPA' 
          AND tpl.Type = 'TPL'
          AND tpa.RemainingAmount < 0
          AND tpl.RemainingAmount > 0;
    END


    -- Add more level-specific logic as needed...
    
    -- Check if any allocations were made at this level
    DECLARE @AllocationsAtLevel INT;
    SELECT @AllocationsAtLevel = COUNT(*) 
    FROM #AllocationResults 
    WHERE AllocationLevel = @CurrentLevel;
    
    PRINT 'Allocations made at level ' + CAST(@CurrentLevel AS VARCHAR) + ': ' + CAST(@AllocationsAtLevel AS VARCHAR);
    
    -- Update remaining amounts in working table
    UPDATE wd
    SET RemainingAmount = ar.TPARemainingAmount
    FROM #WorkingData wd
    INNER JOIN #AllocationResults ar ON wd.RowID = ar.TPARowID
    WHERE ar.AllocationLevel = @CurrentLevel;
    
    UPDATE wd
    SET RemainingAmount = ar.TPLRemainingAmount
    FROM #WorkingData wd
    INNER JOIN #AllocationResults ar ON wd.RowID = ar.TPLRowID
    WHERE ar.AllocationLevel = @CurrentLevel;
    
    -- Update remaining cross entity amount
    SELECT @RemainingCrossEntityAmount = @RemainingCrossEntityAmount - ISNULL(SUM(AllocatedAmount), 0)
    FROM #AllocationResults
    WHERE AllocationLevel = @CurrentLevel;
    
    -- Move to next level
    SET @CurrentLevel = @CurrentLevel - 1;
END;

-- DEBUG: Check what's in allocation results
PRINT '';

-- Final Results Summary
SELECT 
    'Allocation Summary' as ReportType,
    ISIN,
    AllocationLevel,
    COUNT(*) as NumberOfAllocations,
    SUM(AllocatedAmount) as TotalAllocated
FROM #AllocationResults
GROUP BY ISIN, AllocationLevel
ORDER BY AllocationLevel DESC;

-- Detailed Allocation Results
SELECT 
    ar.AllocationID,
    ar.ISIN,
    ar.AllocationLevel,
    ar.MatchPath,
    ar.TPAOriginalAmount,
    ar.TPLOriginalAmount,
    ar.AllocatedAmount,
    ar.TPARemainingAmount,
    ar.TPLRemainingAmount
FROM #AllocationResults ar
ORDER BY ar.AllocationLevel DESC, ar.AllocationID;

-- Show unallocated amounts
PRINT '';
PRINT 'Unallocated amounts:';
SELECT 
    Type,
    ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7,
    OriginalAmount,
    RemainingAmount
FROM #WorkingData
WHERE (Type = 'TPA' AND RemainingAmount < 0)
   OR (Type = 'TPL' AND RemainingAmount > 0)
ORDER BY Type, RowID;

-- Cross Entity Summary
SELECT 
    cn.ISIN,
    cn.GBPIFRSBalanceSheetAmount as TotalCrossEntityAmount,
    ISNULL(SUM(ar.AllocatedAmount), 0) as TotalAllocated,
    cn.GBPIFRSBalanceSheetAmount - ISNULL(SUM(ar.AllocatedAmount), 0) as RemainingUnallocated
FROM CrossNetting cn
LEFT JOIN #AllocationResults ar ON cn.ISIN = ar.ISIN
GROUP BY cn.ISIN, cn.GBPIFRSBalanceSheetAmount;



