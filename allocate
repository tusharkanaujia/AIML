CREATE PROCEDURE sp_AllocateCrossNetting_MultiISIN
AS
BEGIN
    SET NOCOUNT ON;

    IF OBJECT_ID('tempdb..#Journal_TPA') IS NOT NULL DROP TABLE #Journal_TPA;
    IF OBJECT_ID('tempdb..#Journal_TPL') IS NOT NULL DROP TABLE #Journal_TPL;

    CREATE TABLE #Journal_TPA (
        ISIN VARCHAR(20),
        ProdLevel2 VARCHAR(100),
        ProdLevel3 VARCHAR(100),
        ProdLevel4 VARCHAR(100),
        ProdLevel5 VARCHAR(100),
        ProdLevel6 VARCHAR(100),
        ProdLevel7 VARCHAR(100),
        ProdLevel8 VARCHAR(100),
        ProdLevel9 VARCHAR(100),
        ProdLevel10 VARCHAR(100),
        ProdLevel11 VARCHAR(100),
        AllocatedAmount DECIMAL(18,2),
        BalanceSource VARCHAR(100)
    );

    CREATE TABLE #Journal_TPL (
        ISIN VARCHAR(20),
        ProdLevel2 VARCHAR(100),
        ProdLevel3 VARCHAR(100),
        ProdLevel4 VARCHAR(100),
        ProdLevel5 VARCHAR(100),
        ProdLevel6 VARCHAR(100),
        ProdLevel7 VARCHAR(100),
        ProdLevel8 VARCHAR(100),
        ProdLevel9 VARCHAR(100),
        ProdLevel10 VARCHAR(100),
        ProdLevel11 VARCHAR(100),
        AllocatedAmount DECIMAL(18,2),
        BalanceSource VARCHAR(100)
    );

    ---------------------------------------------
    -- TPA Allocation
    ---------------------------------------------
    ;WITH TPA_Ranked AS (
        SELECT
            b.*,
            c.GBPIFRSBalanceSheetAmount,
            ABS(b.TotalAmount) AS AbsAmount,
            ROW_NUMBER() OVER (
                PARTITION BY b.ISIN
                ORDER BY 
                    CASE 
                        WHEN ProdLevel11 IS NOT NULL THEN 1
                        WHEN ProdLevel10 IS NOT NULL THEN 2
                        WHEN ProdLevel9 IS NOT NULL THEN 3
                        WHEN ProdLevel8 IS NOT NULL THEN 4
                        WHEN ProdLevel7 IS NOT NULL THEN 5
                        WHEN ProdLevel6 IS NOT NULL THEN 6
                        WHEN ProdLevel5 IS NOT NULL THEN 7
                        WHEN ProdLevel4 IS NOT NULL THEN 8
                        WHEN ProdLevel3 IS NOT NULL THEN 9
                        WHEN ProdLevel2 IS NOT NULL THEN 10
                        ELSE 11 
                    END
            ) AS RowNum
        FROM BusinessDetails b
        JOIN CrossNetting c ON b.ISIN = c.ISIN
        WHERE b.Type = 'TPA'
    ),
    TPA_Alloc AS (
        SELECT *,
            SUM(AbsAmount) OVER (PARTITION BY ISIN ORDER BY RowNum ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS RunningTotal,
            SUM(AbsAmount) OVER (PARTITION BY ISIN ORDER BY RowNum ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS PrevTotal
        FROM TPA_Ranked
    )
    INSERT INTO #Journal_TPA
    SELECT 
        ISIN,
        ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5,
        ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, ProdLevel11,
        CASE 
            WHEN RunningTotal <= GBPIFRSBalanceSheetAmount THEN AbsAmount
            WHEN PrevTotal < GBPIFRSBalanceSheetAmount THEN GBPIFRSBalanceSheetAmount - PrevTotal
            ELSE 0 
        END AS AllocatedAmount,
        CASE
            WHEN ProdLevel4 IS NOT NULL AND ProdLevel3 IS NOT NULL THEN 'Cross Entity - Business and Diversified'
            WHEN ProdLevel4 IS NOT NULL THEN 'Cross Entity - Business'
            WHEN ProdLevel3 IS NOT NULL THEN 'Cross Entity - Diversified'
            ELSE NULL
        END AS BalanceSource
    FROM TPA_Alloc
    WHERE 
        (RunningTotal <= GBPIFRSBalanceSheetAmount)
        OR (PrevTotal < GBPIFRSBalanceSheetAmount);

    ---------------------------------------------
    -- TPL Allocation
    ---------------------------------------------
    ;WITH TPL_Ranked AS (
        SELECT
            b.*,
            c.GBPIFRSBalanceSheetAmount,
            ABS(b.TotalAmount) AS AbsAmount,
            ROW_NUMBER() OVER (
                PARTITION BY b.ISIN
                ORDER BY 
                    CASE 
                        WHEN ProdLevel11 IS NOT NULL THEN 1
                        WHEN ProdLevel10 IS NOT NULL THEN 2
                        WHEN ProdLevel9 IS NOT NULL THEN 3
                        WHEN ProdLevel8 IS NOT NULL THEN 4
                        WHEN ProdLevel7 IS NOT NULL THEN 5
                        WHEN ProdLevel6 IS NOT NULL THEN 6
                        WHEN ProdLevel5 IS NOT NULL THEN 7
                        WHEN ProdLevel4 IS NOT NULL THEN 8
                        WHEN ProdLevel3 IS NOT NULL THEN 9
                        WHEN ProdLevel2 IS NOT NULL THEN 10
                        ELSE 11 
                    END
            ) AS RowNum
        FROM BusinessDetails b
        JOIN CrossNetting c ON b.ISIN = c.ISIN
        WHERE b.Type = 'TPL'
    ),
    TPL_Alloc AS (
        SELECT *,
            SUM(AbsAmount) OVER (PARTITION BY ISIN ORDER BY RowNum ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS RunningTotal,
            SUM(AbsAmount) OVER (PARTITION BY ISIN ORDER BY RowNum ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS PrevTotal
        FROM TPL_Ranked
    )
    INSERT INTO #Journal_TPL
    SELECT 
        ISIN,
        ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5,
        ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, ProdLevel11,
        -CASE 
            WHEN RunningTotal <= GBPIFRSBalanceSheetAmount THEN AbsAmount
            WHEN PrevTotal < GBPIFRSBalanceSheetAmount THEN GBPIFRSBalanceSheetAmount - PrevTotal
            ELSE 0 
        END AS AllocatedAmount,
        CASE
            WHEN ProdLevel4 IS NOT NULL AND ProdLevel3 IS NOT NULL THEN 'Cross Entity - Business and Diversified'
            WHEN ProdLevel4 IS NOT NULL THEN 'Cross Entity - Business'
            WHEN ProdLevel3 IS NOT NULL THEN 'Cross Entity - Diversified'
            ELSE NULL
        END AS BalanceSource
    FROM TPL_Alloc
    WHERE 
        (RunningTotal <= GBPIFRSBalanceSheetAmount)
        OR (PrevTotal < GBPIFRSBalanceSheetAmount);

    ---------------------------------------------
    -- Final output
    ---------------------------------------------
    SELECT 'TPA' AS JournalType, * FROM #Journal_TPA;
    SELECT 'TPL' AS JournalType, * FROM #Journal_TPL;
END




---



CREATE PROCEDURE sp_AllocateCrossNetting_MultiISIN
AS
BEGIN
    SET NOCOUNT ON;

    IF OBJECT_ID('tempdb..#Journal_TPA') IS NOT NULL DROP TABLE #Journal_TPA;
    IF OBJECT_ID('tempdb..#Journal_TPL') IS NOT NULL DROP TABLE #Journal_TPL;

    CREATE TABLE #Journal_TPA (
        ISIN VARCHAR(20),
        ProdLevel2 VARCHAR(100),
        ProdLevel3 VARCHAR(100),
        ProdLevel4 VARCHAR(100),
        ProdLevel5 VARCHAR(100),
        ProdLevel6 VARCHAR(100),
        ProdLevel7 VARCHAR(100),
        ProdLevel8 VARCHAR(100),
        ProdLevel9 VARCHAR(100),
        ProdLevel10 VARCHAR(100),
        ProdLevel11 VARCHAR(100),
        AllocatedAmount DECIMAL(18,2),
        BalanceSource VARCHAR(100)
    );

    CREATE TABLE #Journal_TPL (
        ISIN VARCHAR(20),
        ProdLevel2 VARCHAR(100),
        ProdLevel3 VARCHAR(100),
        ProdLevel4 VARCHAR(100),
        ProdLevel5 VARCHAR(100),
        ProdLevel6 VARCHAR(100),
        ProdLevel7 VARCHAR(100),
        ProdLevel8 VARCHAR(100),
        ProdLevel9 VARCHAR(100),
        ProdLevel10 VARCHAR(100),
        ProdLevel11 VARCHAR(100),
        AllocatedAmount DECIMAL(18,2),
        BalanceSource VARCHAR(100)
    );

    DECLARE @ISIN VARCHAR(20);
    DECLARE @NettingAmount DECIMAL(18,2);

    DECLARE ISIN_CURSOR CURSOR FOR
        SELECT ISIN, GBPIFRSBalanceSheetAmount FROM CrossNetting;

    OPEN ISIN_CURSOR;
    FETCH NEXT FROM ISIN_CURSOR INTO @ISIN, @NettingAmount;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        IF OBJECT_ID('tempdb..#TempTPA') IS NOT NULL DROP TABLE #TempTPA;
        IF OBJECT_ID('tempdb..#TempTPL') IS NOT NULL DROP TABLE #TempTPL;

        SELECT *, ROW_NUMBER() OVER (
            ORDER BY 
                CASE 
                    WHEN ProdLevel11 IS NOT NULL THEN 1
                    WHEN ProdLevel10 IS NOT NULL THEN 2
                    WHEN ProdLevel9 IS NOT NULL THEN 3
                    WHEN ProdLevel8 IS NOT NULL THEN 4
                    WHEN ProdLevel7 IS NOT NULL THEN 5
                    WHEN ProdLevel6 IS NOT NULL THEN 6
                    WHEN ProdLevel5 IS NOT NULL THEN 7
                    WHEN ProdLevel4 IS NOT NULL THEN 8
                    WHEN ProdLevel3 IS NOT NULL THEN 9
                    WHEN ProdLevel2 IS NOT NULL THEN 10
                    ELSE 11 
                END
        ) AS RowNum
        INTO #TempTPA
        FROM BusinessDetails
        WHERE ISIN = @ISIN AND Type = 'TPA';

        SELECT *, ROW_NUMBER() OVER (
            ORDER BY 
                CASE 
                    WHEN ProdLevel11 IS NOT NULL THEN 1
                    WHEN ProdLevel10 IS NOT NULL THEN 2
                    WHEN ProdLevel9 IS NOT NULL THEN 3
                    WHEN ProdLevel8 IS NOT NULL THEN 4
                    WHEN ProdLevel7 IS NOT NULL THEN 5
                    WHEN ProdLevel6 IS NOT NULL THEN 6
                    WHEN ProdLevel5 IS NOT NULL THEN 7
                    WHEN ProdLevel4 IS NOT NULL THEN 8
                    WHEN ProdLevel3 IS NOT NULL THEN 9
                    WHEN ProdLevel2 IS NOT NULL THEN 10
                    ELSE 11 
                END
        ) AS RowNum
        INTO #TempTPL
        FROM BusinessDetails
        WHERE ISIN = @ISIN AND Type = 'TPL';

        -- TPA Allocation
        DECLARE @RunningTPA DECIMAL(18,2) = 0;
        DECLARE @Row INT = 1;
        DECLARE @TotalRows INT = (SELECT COUNT(*) FROM #TempTPA);

        WHILE @Row <= @TotalRows AND @RunningTPA < @NettingAmount
        BEGIN
            DECLARE @TPAAmount DECIMAL(18,2);
            SELECT @TPAAmount = ABS(TotalAmount) FROM #TempTPA WHERE RowNum = @Row;

            DECLARE @AllocAmount DECIMAL(18,2) =
                CASE
                    WHEN @RunningTPA + @TPAAmount <= @NettingAmount THEN @TPAAmount
                    ELSE @NettingAmount - @RunningTPA
                END;

            DECLARE @P2 VARCHAR(100), @P3 VARCHAR(100), @P4 VARCHAR(100), @BalanceSource VARCHAR(100);
            SELECT @P2 = ProdLevel2, @P3 = ProdLevel3, @P4 = ProdLevel4
            FROM #TempTPA WHERE RowNum = @Row;

            SET @BalanceSource = CASE
                WHEN @P4 IS NOT NULL AND (@P3 IS NOT NULL AND @P2 IS NOT NULL) THEN 'Cross Entity - Business and Diversified'
                WHEN @P4 IS NOT NULL THEN 'Cross Entity - Business'
                WHEN @P3 IS NOT NULL THEN 'Cross Entity - Diversified'
                ELSE NULL
            END;

            INSERT INTO #Journal_TPA
            SELECT ISIN, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5,
                   ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, ProdLevel11,
                   @AllocAmount, @BalanceSource
            FROM #TempTPA
            WHERE RowNum = @Row AND @AllocAmount > 0;

            SET @RunningTPA += @AllocAmount;
            SET @Row += 1;
        END

        -- TPL Allocation
        DECLARE @RunningTPL DECIMAL(18,2) = 0;
        SET @Row = 1;
        SET @TotalRows = (SELECT COUNT(*) FROM #TempTPL);

        WHILE @Row <= @TotalRows AND @RunningTPL < @NettingAmount
        BEGIN
            DECLARE @TPLAmount DECIMAL(18,2);
            SELECT @TPLAmount = ABS(TotalAmount) FROM #TempTPL WHERE RowNum = @Row;

            DECLARE @AllocAmount_TPL DECIMAL(18,2) =
                CASE
                    WHEN @RunningTPL + @TPLAmount <= @NettingAmount THEN @TPLAmount
                    ELSE @NettingAmount - @RunningTPL
                END;

            DECLARE @P2_TPL VARCHAR(100), @P3_TPL VARCHAR(100), @P4_TPL VARCHAR(100), @BalanceSource_TPL VARCHAR(100);
            SELECT @P2_TPL = ProdLevel2, @P3_TPL = ProdLevel3, @P4_TPL = ProdLevel4
            FROM #TempTPL WHERE RowNum = @Row;

            SET @BalanceSource_TPL = CASE
                WHEN @P4_TPL IS NOT NULL AND (@P3_TPL IS NOT NULL AND @P2_TPL IS NOT NULL) THEN 'Cross Entity - Business and Diversified'
                WHEN @P4_TPL IS NOT NULL THEN 'Cross Entity - Business'
                WHEN @P3_TPL IS NOT NULL THEN 'Cross Entity - Diversified'
                ELSE NULL
            END;

            INSERT INTO #Journal_TPL
            SELECT ISIN, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5,
                   ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, ProdLevel11,
                   -@AllocAmount_TPL, @BalanceSource_TPL
            FROM #TempTPL
            WHERE RowNum = @Row AND @AllocAmount_TPL > 0;

            SET @RunningTPL += @AllocAmount_TPL;
            SET @Row += 1;
        END

        FETCH NEXT FROM ISIN_CURSOR INTO @ISIN, @NettingAmount;
    END

    CLOSE ISIN_CURSOR;
    DEALLOCATE ISIN_CURSOR;

    -- Final output
    SELECT 'TPA' AS JournalType, * FROM #Journal_TPA;
    SELECT 'TPL' AS JournalType, * FROM #Journal_TPL;
END


-----


CREATE PROCEDURE sp_AllocateCrossNetting_MultiISIN
AS
BEGIN
    SET NOCOUNT ON;

    -- Final output tables
    IF OBJECT_ID('tempdb..#Journal_TPA') IS NOT NULL DROP TABLE #Journal_TPA;
    IF OBJECT_ID('tempdb..#Journal_TPL') IS NOT NULL DROP TABLE #Journal_TPL;

    CREATE TABLE #Journal_TPA (
        ISIN VARCHAR(20),
        ProdLevel2 VARCHAR(100),
        ProdLevel3 VARCHAR(100),
        ProdLevel4 VARCHAR(100),
        ProdLevel5 VARCHAR(100),
        ProdLevel6 VARCHAR(100),
        ProdLevel7 VARCHAR(100),
        ProdLevel8 VARCHAR(100),
        ProdLevel9 VARCHAR(100),
        ProdLevel10 VARCHAR(100),
        ProdLevel11 VARCHAR(100),
        AllocatedAmount DECIMAL(18,2)
    );

    CREATE TABLE #Journal_TPL (
        ISIN VARCHAR(20),
        ProdLevel2 VARCHAR(100),
        ProdLevel3 VARCHAR(100),
        ProdLevel4 VARCHAR(100),
        ProdLevel5 VARCHAR(100),
        ProdLevel6 VARCHAR(100),
        ProdLevel7 VARCHAR(100),
        ProdLevel8 VARCHAR(100),
        ProdLevel9 VARCHAR(100),
        ProdLevel10 VARCHAR(100),
        ProdLevel11 VARCHAR(100),
        AllocatedAmount DECIMAL(18,2)
    );

    DECLARE @ISIN VARCHAR(20);
    DECLARE @NettingAmount DECIMAL(18,2);

    DECLARE ISIN_CURSOR CURSOR FOR
        SELECT ISIN, GBPIFRSBalanceSheetAmount
        FROM CrossNetting;

    OPEN ISIN_CURSOR;
    FETCH NEXT FROM ISIN_CURSOR INTO @ISIN, @NettingAmount;

    WHILE @@FETCH_STATUS = 0
    BEGIN
        -- Temp working tables
        IF OBJECT_ID('tempdb..#TempTPA') IS NOT NULL DROP TABLE #TempTPA;
        IF OBJECT_ID('tempdb..#TempTPL') IS NOT NULL DROP TABLE #TempTPL;

        SELECT *, ROW_NUMBER() OVER (
            ORDER BY 
                CASE 
                    WHEN ProdLevel11 IS NOT NULL THEN 1
                    WHEN ProdLevel10 IS NOT NULL THEN 2
                    WHEN ProdLevel9 IS NOT NULL THEN 3
                    WHEN ProdLevel8 IS NOT NULL THEN 4
                    WHEN ProdLevel7 IS NOT NULL THEN 5
                    WHEN ProdLevel6 IS NOT NULL THEN 6
                    WHEN ProdLevel5 IS NOT NULL THEN 7
                    WHEN ProdLevel4 IS NOT NULL THEN 8
                    WHEN ProdLevel3 IS NOT NULL THEN 9
                    WHEN ProdLevel2 IS NOT NULL THEN 10
                    ELSE 11 
                END
        ) AS RowNum
        INTO #TempTPA
        FROM BusinessDetails
        WHERE ISIN = @ISIN AND Type = 'TPA';

        SELECT *, ROW_NUMBER() OVER (
            ORDER BY 
                CASE 
                    WHEN ProdLevel11 IS NOT NULL THEN 1
                    WHEN ProdLevel10 IS NOT NULL THEN 2
                    WHEN ProdLevel9 IS NOT NULL THEN 3
                    WHEN ProdLevel8 IS NOT NULL THEN 4
                    WHEN ProdLevel7 IS NOT NULL THEN 5
                    WHEN ProdLevel6 IS NOT NULL THEN 6
                    WHEN ProdLevel5 IS NOT NULL THEN 7
                    WHEN ProdLevel4 IS NOT NULL THEN 8
                    WHEN ProdLevel3 IS NOT NULL THEN 9
                    WHEN ProdLevel2 IS NOT NULL THEN 10
                    ELSE 11 
                END
        ) AS RowNum
        INTO #TempTPL
        FROM BusinessDetails
        WHERE ISIN = @ISIN AND Type = 'TPL';

        -- TPA Allocation
        DECLARE @RunningTPA DECIMAL(18,2) = 0;
        DECLARE @Row INT = 1;
        DECLARE @TotalRows INT = (SELECT COUNT(*) FROM #TempTPA);

        WHILE @Row <= @TotalRows AND @RunningTPA < @NettingAmount
        BEGIN
            DECLARE @TPAAmount DECIMAL(18,2);
            SELECT @TPAAmount = ABS(TotalAmount) FROM #TempTPA WHERE RowNum = @Row;

            DECLARE @AllocAmount DECIMAL(18,2) =
                CASE
                    WHEN @RunningTPA + @TPAAmount <= @NettingAmount THEN @TPAAmount
                    ELSE @NettingAmount - @RunningTPA
                END;

            INSERT INTO #Journal_TPA
            SELECT ISIN, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5,
                   ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, ProdLevel11,
                   @AllocAmount
            FROM #TempTPA
            WHERE RowNum = @Row AND @AllocAmount > 0;

            SET @RunningTPA += @AllocAmount;
            SET @Row += 1;
        END

        -- TPL Allocation
        DECLARE @RunningTPL DECIMAL(18,2) = 0;
        SET @Row = 1;
        SET @TotalRows = (SELECT COUNT(*) FROM #TempTPL);

        WHILE @Row <= @TotalRows AND @RunningTPL < @NettingAmount
        BEGIN
            DECLARE @TPLAmount DECIMAL(18,2);
            SELECT @TPLAmount = ABS(TotalAmount) FROM #TempTPL WHERE RowNum = @Row;

            DECLARE @AllocAmount_TPL DECIMAL(18,2) =
                CASE
                    WHEN @RunningTPL + @TPLAmount <= @NettingAmount THEN @TPLAmount
                    ELSE @NettingAmount - @RunningTPL
                END;

            INSERT INTO #Journal_TPL
            SELECT ISIN, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5,
                   ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, ProdLevel11,
                   -@AllocAmount_TPL
            FROM #TempTPL
            WHERE RowNum = @Row AND @AllocAmount_TPL > 0;

            SET @RunningTPL += @AllocAmount_TPL;
            SET @Row += 1;
        END

        FETCH NEXT FROM ISIN_CURSOR INTO @ISIN, @NettingAmount;
    END

    CLOSE ISIN_CURSOR;
    DEALLOCATE ISIN_CURSOR;

    -- Final output
    SELECT 'TPA' AS JournalType, * FROM #Journal_TPA;
    SELECT 'TPL' AS JournalType, * FROM #Journal_TPL;
END
