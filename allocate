CREATE PROCEDURE sp_AllocateCrossNetting
    @ISIN VARCHAR(20),
    @NettingAmount DECIMAL(18, 2)
AS
BEGIN
    SET NOCOUNT ON;

    -- Temp tables for TPA and TPL journal entries
    IF OBJECT_ID('tempdb..#Journal_TPA') IS NOT NULL DROP TABLE #Journal_TPA;
    IF OBJECT_ID('tempdb..#Journal_TPL') IS NOT NULL DROP TABLE #Journal_TPL;

    CREATE TABLE #Journal_TPA (
        ISIN VARCHAR(20),
        ProdLevel2 VARCHAR(100),
        ProdLevel3 VARCHAR(100),
        ProdLevel4 VARCHAR(100),
        ProdLevel5 VARCHAR(100),
        ProdLevel6 VARCHAR(100),
        ProdLevel7 VARCHAR(100),
        ProdLevel8 VARCHAR(100),
        ProdLevel9 VARCHAR(100),
        ProdLevel10 VARCHAR(100),
        AllocatedAmount DECIMAL(18,2)
    );

    CREATE TABLE #Journal_TPL (
        ISIN VARCHAR(20),
        ProdLevel2 VARCHAR(100),
        ProdLevel3 VARCHAR(100),
        ProdLevel4 VARCHAR(100),
        ProdLevel5 VARCHAR(100),
        ProdLevel6 VARCHAR(100),
        ProdLevel7 VARCHAR(100),
        ProdLevel8 VARCHAR(100),
        ProdLevel9 VARCHAR(100),
        ProdLevel10 VARCHAR(100),
        AllocatedAmount DECIMAL(18,2)
    );

    DECLARE @RunningTPA DECIMAL(18,2) = 0;
    DECLARE @RunningTPL DECIMAL(18,2) = 0;

    -------------------------------
    -- Allocate to TPA Journal
    -------------------------------
    INSERT INTO #Journal_TPA
    SELECT TOP 100 PERCENT
        ISIN,
        ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5,
        ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10,
        0 -- placeholder
    FROM BusinessDetails
    WHERE ISIN = @ISIN AND Type = 'TPA'
    ORDER BY 
        CASE WHEN ProdLevel10 IS NOT NULL THEN 1
             WHEN ProdLevel9 IS NOT NULL THEN 2
             WHEN ProdLevel8 IS NOT NULL THEN 3
             WHEN ProdLevel7 IS NOT NULL THEN 4
             WHEN ProdLevel6 IS NOT NULL THEN 5
             WHEN ProdLevel5 IS NOT NULL THEN 6
             WHEN ProdLevel4 IS NOT NULL THEN 7
             WHEN ProdLevel3 IS NOT NULL THEN 8
             WHEN ProdLevel2 IS NOT NULL THEN 9
             ELSE 10 END;

    DECLARE @RowId INT = 1;
    DECLARE @TPA_TotalRows INT = (SELECT COUNT(*) FROM #Journal_TPA);

    WHILE @RowId <= @TPA_TotalRows AND @RunningTPA < @NettingAmount
    BEGIN
        DECLARE @CurrentAmount DECIMAL(18,2);
        SELECT @CurrentAmount = ABS(d.TotalAmount)
        FROM (
            SELECT ROW_NUMBER() OVER (ORDER BY 
                CASE WHEN ProdLevel10 IS NOT NULL THEN 1
                     WHEN ProdLevel9 IS NOT NULL THEN 2
                     WHEN ProdLevel8 IS NOT NULL THEN 3
                     ELSE 10 END
            ) AS RowNum, TotalAmount
            FROM BusinessDetails
            WHERE ISIN = @ISIN AND Type = 'TPA'
        ) d
        WHERE d.RowNum = @RowId;

        DECLARE @AllocAmount DECIMAL(18,2) = 
            CASE 
                WHEN @RunningTPA + @CurrentAmount <= @NettingAmount THEN @CurrentAmount
                ELSE @NettingAmount - @RunningTPA
            END;

        UPDATE j
        SET AllocatedAmount = @AllocAmount
        FROM (
            SELECT ROW_NUMBER() OVER (ORDER BY 
                CASE WHEN ProdLevel10 IS NOT NULL THEN 1
                     WHEN ProdLevel9 IS NOT NULL THEN 2
                     WHEN ProdLevel8 IS NOT NULL THEN 3
                     ELSE 10 END
            ) AS RowNum, *
            FROM #Journal_TPA
        ) j
        WHERE j.RowNum = @RowId;

        SET @RunningTPA += @AllocAmount;
        SET @RowId += 1;
    END

    -------------------------------
    -- Allocate to TPL Journal
    -------------------------------
    SET @RowId = 1;
    DECLARE @TPL_TotalRows INT = (SELECT COUNT(*) FROM BusinessDetails WHERE ISIN = @ISIN AND Type = 'TPL');

    INSERT INTO #Journal_TPL
    SELECT TOP 100 PERCENT
        ISIN,
        ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5,
        ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10,
        0 -- placeholder
    FROM BusinessDetails
    WHERE ISIN = @ISIN AND Type = 'TPL'
    ORDER BY 
        CASE WHEN ProdLevel10 IS NOT NULL THEN 1
             WHEN ProdLevel9 IS NOT NULL THEN 2
             WHEN ProdLevel8 IS NOT NULL THEN 3
             WHEN ProdLevel7 IS NOT NULL THEN 4
             WHEN ProdLevel6 IS NOT NULL THEN 5
             WHEN ProdLevel5 IS NOT NULL THEN 6
             WHEN ProdLevel4 IS NOT NULL THEN 7
             WHEN ProdLevel3 IS NOT NULL THEN 8
             WHEN ProdLevel2 IS NOT NULL THEN 9
             ELSE 10 END;

    WHILE @RowId <= @TPL_TotalRows AND @RunningTPL < @NettingAmount
    BEGIN
        DECLARE @CurrentAmount_TPL DECIMAL(18,2);
        SELECT @CurrentAmount_TPL = ABS(d.TotalAmount)
        FROM (
            SELECT ROW_NUMBER() OVER (ORDER BY 
                CASE WHEN ProdLevel10 IS NOT NULL THEN 1
                     WHEN ProdLevel9 IS NOT NULL THEN 2
                     WHEN ProdLevel8 IS NOT NULL THEN 3
                     ELSE 10 END
            ) AS RowNum, TotalAmount
            FROM BusinessDetails
            WHERE ISIN = @ISIN AND Type = 'TPL'
        ) d
        WHERE d.RowNum = @RowId;

        DECLARE @AllocAmount_TPL DECIMAL(18,2) = 
            CASE 
                WHEN @RunningTPL + @CurrentAmount_TPL <= @NettingAmount THEN @CurrentAmount_TPL
                ELSE @NettingAmount - @RunningTPL
            END;

        UPDATE j
        SET AllocatedAmount = -@AllocAmount_TPL
        FROM (
            SELECT ROW_NUMBER() OVER (ORDER BY 
                CASE WHEN ProdLevel10 IS NOT NULL THEN 1
                     WHEN ProdLevel9 IS NOT NULL THEN 2
                     WHEN ProdLevel8 IS NOT NULL THEN 3
                     ELSE 10 END
            ) AS RowNum, *
            FROM #Journal_TPL
        ) j
        WHERE j.RowNum = @RowId;

        SET @RunningTPL += @AllocAmount_TPL;
        SET @RowId += 1;
    END

    -------------------------------
    -- Final Output
    -------------------------------
    SELECT 'TPA' AS JournalType, * FROM #Journal_TPA WHERE AllocatedAmount > 0;
    SELECT 'TPL' AS JournalType, * FROM #Journal_TPL WHERE AllocatedAmount < 0;

END





-- 5. Run the stored procedure
EXEC sp_AllocateCrossNetting 
    @ISIN = 'CH0012221716', 
    @NettingAmount = 6964368;
