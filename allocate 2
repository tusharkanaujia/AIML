-- Cross-Entity Allocation with Proration Logic
-- When multiple rows exist at a level, prorate the allocation

-- Drop and recreate tables with sample data
DROP TABLE IF EXISTS CrossEntityNetting;
DROP TABLE IF EXISTS TPA_BusinessLevel;
DROP TABLE IF EXISTS TPL_BusinessLevel;

-- Create and populate CrossEntityNetting table
CREATE TABLE CrossEntityNetting (
    isin VARCHAR(20),
    CrossEntityNetting DECIMAL(20,4)
);

-- Create and populate TPA Business Level table
CREATE TABLE TPA_BusinessLevel (
    isin VARCHAR(20),
    ProdLevel2 VARCHAR(50),
    ProdLevel3 VARCHAR(50),
    ProdLevel4 VARCHAR(50),
    ProdLevel5 VARCHAR(50),
    ProdLevel6 VARCHAR(50),
    ProdLevel7 VARCHAR(50),
    ProdLevel8 VARCHAR(50),
    ProdLevel9 VARCHAR(50),
    ProdLevel10 VARCHAR(50),
    GBPIFRSBalanceSheetAmount DECIMAL(20,4)
);

-- Create and populate TPL Business Level table
CREATE TABLE TPL_BusinessLevel (
    isin VARCHAR(20),
    ProdLevel2 VARCHAR(50),
    ProdLevel3 VARCHAR(50),
    ProdLevel4 VARCHAR(50),
    ProdLevel5 VARCHAR(50),
    ProdLevel6 VARCHAR(50),
    ProdLevel7 VARCHAR(50),
    ProdLevel8 VARCHAR(50),
    ProdLevel9 VARCHAR(50),
    ProdLevel10 VARCHAR(50),
    GBPIFRSBalanceSheetAmount DECIMAL(20,4)
);





-- Test data
INSERT INTO CrossEntityNetting ([ISIN], CrossEntityNetting)
VALUES
( 'DE0001135481', 28605.00 );

INSERT INTO TPL_BusinessLevel ([ISIN], [ProdLevel2], [ProdLevel3], [ProdLevel4], [ProdLevel5], [ProdLevel6], [ProdLevel7], [ProdLevel8], [ProdLevel9], [ProdLevel10],  GBPIFRSBalanceSheetAmount)
VALUES
( 'DE0001135481', 'Banking', 'Fixed Income Syndicate', 'Syndicate', 'Investment Grade', 'Investment Grade Bonds', 'EMEA IG Bonds', 'Corporates', 'Corporates', 'CP13905 - UK IG Corporate',  -0.01 ),
( 'DE0001135481', 'Markets', 'Credit', 'FI Credit', 'Illiquid Credit', 'Global Illiquids Trading', 'Illiquids Flow', 'Illiquids - Credit', 'Illiquids - Credit', 'Bayram Massaoudi - Credit',  -14794.39 ),
( 'DE0001135481', 'Markets', 'Macro', 'Rates', 'Flow Rates EMEA', 'Rates Flow EMEA', 'EUR Government Bonds', 'EUR Government Bonds_PLC', 'EUR Government Bonds_PLC_Management', 'EGB Management Costs PLC',  -0.01 ),
( 'DE0001135481', 'Markets', 'Macro', 'Rates', 'Structured Rates Trading', 'Index Derivatives', 'Index Derivatives', 'Index Derivatives', 'Index Derivatives EUR Global Government', 'EUR Global Govt',  -13810.72 )

INSERT INTO TPA_BusinessLevel ([ISIN], [ProdLevel2], [ProdLevel3], [ProdLevel4], [ProdLevel5], [ProdLevel6], [ProdLevel7], [ProdLevel8], [ProdLevel9], [ProdLevel10],  GBPIFRSBalanceSheetAmount)
VALUES
( 'DE0001135481', 'Markets', 'Credit', 'FI Credit', 'Flow Credit EMEA', 'HG EMEA', 'EU HG', 'EU HG Alpha Gen', 'EU HG - Corp Cash', 'Giles Schepers',  0.00 ),
( 'DE0001135481', 'Markets', 'Credit', 'FI Credit', 'Flow Credit EMEA', 'HG EMEA', 'EU HG', 'EU HG Alpha Gen', 'EU HG - Corp Cash', 'Ku Fatar',  25012745.06 ),
( 'DE0001135481', 'Markets', 'Macro', 'Rates', 'Flow Rates EMEA', 'Rates Flow EMEA', 'EUR Government Bonds', 'EUR Government Bonds_PLC', 'EUR Government Bonds_PLC_Management', 'EGB Management Costs PLC',  0.02 );



SELECT 'TPA',* FROM dbo.TPA_BusinessLevel
--UNION ALL 
SELECT 'TPL',* FROM dbo.TPL_BusinessLevel
-- Cross-Entity Allocation - Original Rows with Accumulated Allocation
-- Output: Original 10 TPA rows + 12 TPL rows with allocated_amount column
-- Cross-Entity Allocation - Original Rows with Accumulated Allocation
-- Output: Original 10 TPA rows + 12 TPL rows with allocated_amount column

-- Create working tables
CREATE TABLE #RemainingAmount (
    isin VARCHAR(20),
    remaining_amount DECIMAL(20,4)
);

INSERT INTO #RemainingAmount 
SELECT isin, CrossEntityNetting FROM CrossEntityNetting;

-- Create TPA Journal starting with original rows
CREATE TABLE #TPA_Journal (
    isin VARCHAR(20),
    ProdLevel2 VARCHAR(50), ProdLevel3 VARCHAR(50), ProdLevel4 VARCHAR(50), 
    ProdLevel5 VARCHAR(50), ProdLevel6 VARCHAR(50), ProdLevel7 VARCHAR(50), 
    ProdLevel8 VARCHAR(50), ProdLevel9 VARCHAR(50), ProdLevel10 VARCHAR(50),
    original_amount DECIMAL(20,4),
    allocated_amount DECIMAL(20,4) DEFAULT 0
);

-- Create TPL Journal starting with original rows
CREATE TABLE #TPL_Journal (
    isin VARCHAR(20),
    ProdLevel2 VARCHAR(50), ProdLevel3 VARCHAR(50), ProdLevel4 VARCHAR(50), 
    ProdLevel5 VARCHAR(50), ProdLevel6 VARCHAR(50), ProdLevel7 VARCHAR(50), 
    ProdLevel8 VARCHAR(50), ProdLevel9 VARCHAR(50), ProdLevel10 VARCHAR(50),
    original_amount DECIMAL(20,4),
    allocated_amount DECIMAL(20,4) DEFAULT 0
);

-- Insert original TPA rows
INSERT INTO #TPA_Journal (isin, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, original_amount)
SELECT isin, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, GBPIFRSBalanceSheetAmount
FROM TPA_BusinessLevel;

-- Insert original TPL rows
INSERT INTO #TPL_Journal (isin, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, original_amount)
SELECT isin, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, GBPIFRSBalanceSheetAmount
FROM TPL_BusinessLevel;

-- ==================== LEVEL 10 ALLOCATION ====================
-- Create temp table for Level 10 allocations
CREATE TABLE #Level10_Allocations (
    isin VARCHAR(20),
    ProdLevel2 VARCHAR(50), ProdLevel3 VARCHAR(50), ProdLevel4 VARCHAR(50), 
    ProdLevel5 VARCHAR(50), ProdLevel6 VARCHAR(50), ProdLevel7 VARCHAR(50), 
    ProdLevel8 VARCHAR(50), ProdLevel9 VARCHAR(50), ProdLevel10 VARCHAR(50),
    allocated_amount DECIMAL(20,4)
);

-- Find exact matches at Level 10 and calculate allocations
WITH Level10_Matches AS (
    SELECT 
        t.isin,
        t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6,
        t.ProdLevel7, t.ProdLevel8, t.ProdLevel9, t.ProdLevel10,
        ABS(t.original_amount) as TPA_Abs,
        ABS(l.original_amount) as TPL_Abs,
        CASE WHEN ABS(t.original_amount) < ABS(l.original_amount) THEN ABS(t.original_amount) ELSE ABS(l.original_amount) END as min_allocation
    FROM #TPA_Journal t
    JOIN #TPL_Journal l ON t.isin = l.isin 
        AND t.ProdLevel2 = l.ProdLevel2 AND t.ProdLevel3 = l.ProdLevel3 
        AND t.ProdLevel4 = l.ProdLevel4 AND t.ProdLevel5 = l.ProdLevel5 
        AND t.ProdLevel6 = l.ProdLevel6 AND t.ProdLevel7 = l.ProdLevel7 
        AND t.ProdLevel8 = l.ProdLevel8 AND t.ProdLevel9 = l.ProdLevel9 
        AND t.ProdLevel10 = l.ProdLevel10
    WHERE ABS(t.original_amount) > 0 AND ABS(l.original_amount) > 0
),
Level10_WithProration AS (
    SELECT 
        lm.*,
        ra.remaining_amount,
        SUM(lm.min_allocation) OVER (PARTITION BY lm.isin) as total_min_at_level,
        CASE 
            WHEN SUM(lm.min_allocation) OVER (PARTITION BY lm.isin) > 0 THEN
                CASE 
                    WHEN ra.remaining_amount < SUM(lm.min_allocation) OVER (PARTITION BY lm.isin)
                    THEN ra.remaining_amount * (lm.min_allocation / SUM(lm.min_allocation) OVER (PARTITION BY lm.isin))
                    ELSE lm.min_allocation
                END
            ELSE 0
        END as allocated_amount
    FROM Level10_Matches lm
    JOIN #RemainingAmount ra ON lm.isin = ra.isin
)
-- Insert Level 10 allocations into temp table
INSERT INTO #Level10_Allocations
SELECT isin, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, allocated_amount
FROM Level10_WithProration 
WHERE allocated_amount > 0;

-- Update TPA Journal with Level 10 allocations
UPDATE t
SET allocated_amount = t.allocated_amount + l10.allocated_amount
FROM #TPA_Journal t
JOIN #Level10_Allocations l10 ON t.isin = l10.isin 
    AND t.ProdLevel2 = l10.ProdLevel2 AND t.ProdLevel3 = l10.ProdLevel3 
    AND t.ProdLevel4 = l10.ProdLevel4 AND t.ProdLevel5 = l10.ProdLevel5 
    AND t.ProdLevel6 = l10.ProdLevel6 AND t.ProdLevel7 = l10.ProdLevel7 
    AND t.ProdLevel8 = l10.ProdLevel8 AND t.ProdLevel9 = l10.ProdLevel9 
    AND t.ProdLevel10 = l10.ProdLevel10;

-- Update TPL Journal with Level 10 allocations
UPDATE l
SET allocated_amount = l.allocated_amount + l10.allocated_amount
FROM #TPL_Journal l
JOIN #Level10_Allocations l10 ON l.isin = l10.isin 
    AND l.ProdLevel2 = l10.ProdLevel2 AND l.ProdLevel3 = l10.ProdLevel3 
    AND l.ProdLevel4 = l10.ProdLevel4 AND l.ProdLevel5 = l10.ProdLevel5 
    AND l.ProdLevel6 = l10.ProdLevel6 AND l.ProdLevel7 = l10.ProdLevel7 
    AND l.ProdLevel8 = l10.ProdLevel8 AND l.ProdLevel9 = l10.ProdLevel9 
    AND l.ProdLevel10 = l10.ProdLevel10;

-- Update remaining amount after Level 10
UPDATE #RemainingAmount 
SET remaining_amount = remaining_amount - (
    SELECT ISNULL(SUM(allocated_amount), 0)
    FROM #Level10_Allocations
);

DROP TABLE #Level10_Allocations;

-- ==================== LEVEL 9 ALLOCATION ====================
-- Create temp table for Level 9 allocations
CREATE TABLE #Level9_Allocations (
    isin VARCHAR(20),
    ProdLevel2 VARCHAR(50), ProdLevel3 VARCHAR(50), ProdLevel4 VARCHAR(50), 
    ProdLevel5 VARCHAR(50), ProdLevel6 VARCHAR(50), ProdLevel7 VARCHAR(50), 
    ProdLevel8 VARCHAR(50), ProdLevel9 VARCHAR(50), ProdLevel10 VARCHAR(50),
    tpa_share DECIMAL(20,4),
    tpl_share DECIMAL(20,4)
);

-- Find matches at Level 9 (aggregate by ProdLevel2-9)
WITH Level9_Aggregated AS (
    SELECT 
        t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6, t.ProdLevel7, t.ProdLevel8, t.ProdLevel9,
        SUM(ABS(t.original_amount)) as TPA_Abs_Total,
        SUM(ABS(l.original_amount)) as TPL_Abs_Total
    FROM #TPA_Journal t
    JOIN #TPL_Journal l ON t.isin = l.isin 
        AND t.ProdLevel2 = l.ProdLevel2 AND t.ProdLevel3 = l.ProdLevel3 
        AND t.ProdLevel4 = l.ProdLevel4 AND t.ProdLevel5 = l.ProdLevel5 
        AND t.ProdLevel6 = l.ProdLevel6 AND t.ProdLevel7 = l.ProdLevel7 
        AND t.ProdLevel8 = l.ProdLevel8 AND t.ProdLevel9 = l.ProdLevel9
    GROUP BY t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6, t.ProdLevel7, t.ProdLevel8, t.ProdLevel9
    HAVING SUM(ABS(t.original_amount)) > 0 AND SUM(ABS(l.original_amount)) > 0
),
Level9_WithProration AS (
    SELECT 
        la.*,
        CASE WHEN la.TPA_Abs_Total < la.TPL_Abs_Total THEN la.TPA_Abs_Total ELSE la.TPL_Abs_Total END as min_allocation,
        ra.remaining_amount,
        SUM(CASE WHEN la.TPA_Abs_Total < la.TPL_Abs_Total THEN la.TPA_Abs_Total ELSE la.TPL_Abs_Total END) OVER (PARTITION BY la.isin) as total_min_at_level
    FROM Level9_Aggregated la
    JOIN #RemainingAmount ra ON la.isin = ra.isin
),
Level9_Distribution AS (
    SELECT 
        t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6, t.ProdLevel7, t.ProdLevel8, t.ProdLevel9, t.ProdLevel10,
        CASE 
            WHEN lwp.total_min_at_level > 0 THEN
                CASE 
                    WHEN lwp.remaining_amount < lwp.total_min_at_level
                    THEN (lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level)) * (ABS(t.original_amount) / lwp.TPA_Abs_Total)
                    ELSE lwp.min_allocation * (ABS(t.original_amount) / lwp.TPA_Abs_Total)
                END
            ELSE 0
        END as tpa_share,
        CASE 
            WHEN lwp.total_min_at_level > 0 THEN
                CASE 
                    WHEN lwp.remaining_amount < lwp.total_min_at_level
                    THEN (lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level)) * (ABS(l.original_amount) / lwp.TPL_Abs_Total)
                    ELSE lwp.min_allocation * (ABS(l.original_amount) / lwp.TPL_Abs_Total)
                END
            ELSE 0
        END as tpl_share
    FROM #TPA_Journal t
    JOIN #TPL_Journal l ON t.isin = l.isin 
        AND t.ProdLevel2 = l.ProdLevel2 AND t.ProdLevel3 = l.ProdLevel3 
        AND t.ProdLevel4 = l.ProdLevel4 AND t.ProdLevel5 = l.ProdLevel5 
        AND t.ProdLevel6 = l.ProdLevel6 AND t.ProdLevel7 = l.ProdLevel7 
        AND t.ProdLevel8 = l.ProdLevel8 AND t.ProdLevel9 = l.ProdLevel9
    JOIN Level9_WithProration lwp ON t.isin = lwp.isin 
        AND t.ProdLevel2 = lwp.ProdLevel2 AND t.ProdLevel3 = lwp.ProdLevel3 
        AND t.ProdLevel4 = lwp.ProdLevel4 AND t.ProdLevel5 = lwp.ProdLevel5 
        AND t.ProdLevel6 = lwp.ProdLevel6 AND t.ProdLevel7 = lwp.ProdLevel7 
        AND t.ProdLevel8 = lwp.ProdLevel8 AND t.ProdLevel9 = lwp.ProdLevel9
)
-- Insert Level 9 allocations into temp table
INSERT INTO #Level9_Allocations
SELECT isin, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, tpa_share, tpl_share
FROM Level9_Distribution 
WHERE tpa_share > 0 OR tpl_share > 0;

-- Update TPA Journal with Level 9 allocations
UPDATE t
SET allocated_amount = t.allocated_amount + l9.tpa_share
FROM #TPA_Journal t
JOIN #Level9_Allocations l9 ON t.isin = l9.isin 
    AND t.ProdLevel2 = l9.ProdLevel2 AND t.ProdLevel3 = l9.ProdLevel3 
    AND t.ProdLevel4 = l9.ProdLevel4 AND t.ProdLevel5 = l9.ProdLevel5 
    AND t.ProdLevel6 = l9.ProdLevel6 AND t.ProdLevel7 = l9.ProdLevel7 
    AND t.ProdLevel8 = l9.ProdLevel8 AND t.ProdLevel9 = l9.ProdLevel9 
    AND t.ProdLevel10 = l9.ProdLevel10;

-- Update TPL Journal with Level 9 allocations
UPDATE l
SET allocated_amount = l.allocated_amount + l9.tpl_share
FROM #TPL_Journal l
JOIN #Level9_Allocations l9 ON l.isin = l9.isin 
    AND l.ProdLevel2 = l9.ProdLevel2 AND l.ProdLevel3 = l9.ProdLevel3 
    AND l.ProdLevel4 = l9.ProdLevel4 AND l.ProdLevel5 = l9.ProdLevel5 
    AND l.ProdLevel6 = l9.ProdLevel6 AND l.ProdLevel7 = l9.ProdLevel7 
    AND l.ProdLevel8 = l9.ProdLevel8 AND l.ProdLevel9 = l9.ProdLevel9 
    AND l.ProdLevel10 = l9.ProdLevel10;

-- Update remaining amount after Level 9
UPDATE #RemainingAmount 
SET remaining_amount = remaining_amount - (
    SELECT ISNULL(SUM(tpa_share), 0)
    FROM #Level9_Allocations
);

DROP TABLE #Level9_Allocations;

-- ==================== LEVEL 8 ALLOCATION ====================
CREATE TABLE #Level8_Allocations (
    isin VARCHAR(20),
    ProdLevel2 VARCHAR(50), ProdLevel3 VARCHAR(50), ProdLevel4 VARCHAR(50), 
    ProdLevel5 VARCHAR(50), ProdLevel6 VARCHAR(50), ProdLevel7 VARCHAR(50), 
    ProdLevel8 VARCHAR(50), ProdLevel9 VARCHAR(50), ProdLevel10 VARCHAR(50),
    tpa_share DECIMAL(20,4),
    tpl_share DECIMAL(20,4)
);

WITH Level8_Aggregated AS (
    SELECT 
        t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6, t.ProdLevel7, t.ProdLevel8,
        SUM(ABS(t.original_amount)) as TPA_Abs_Total,
        SUM(ABS(l.original_amount)) as TPL_Abs_Total
    FROM #TPA_Journal t
    JOIN #TPL_Journal l ON t.isin = l.isin 
        AND t.ProdLevel2 = l.ProdLevel2 AND t.ProdLevel3 = l.ProdLevel3 
        AND t.ProdLevel4 = l.ProdLevel4 AND t.ProdLevel5 = l.ProdLevel5 
        AND t.ProdLevel6 = l.ProdLevel6 AND t.ProdLevel7 = l.ProdLevel7 
        AND t.ProdLevel8 = l.ProdLevel8
    GROUP BY t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6, t.ProdLevel7, t.ProdLevel8
    HAVING SUM(ABS(t.original_amount)) > 0 AND SUM(ABS(l.original_amount)) > 0
),
Level8_WithProration AS (
    SELECT 
        la.*,
        CASE WHEN la.TPA_Abs_Total < la.TPL_Abs_Total THEN la.TPA_Abs_Total ELSE la.TPL_Abs_Total END as min_allocation,
        ra.remaining_amount,
        SUM(CASE WHEN la.TPA_Abs_Total < la.TPL_Abs_Total THEN la.TPA_Abs_Total ELSE la.TPL_Abs_Total END) OVER (PARTITION BY la.isin) as total_min_at_level
    FROM Level8_Aggregated la
    JOIN #RemainingAmount ra ON la.isin = ra.isin
),
Level8_Distribution AS (
    SELECT 
        t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6, t.ProdLevel7, t.ProdLevel8, t.ProdLevel9, t.ProdLevel10,
        CASE 
            WHEN lwp.total_min_at_level > 0 THEN
                CASE 
                    WHEN lwp.remaining_amount < lwp.total_min_at_level
                    THEN (lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level)) * (ABS(t.original_amount) / lwp.TPA_Abs_Total)
                    ELSE lwp.min_allocation * (ABS(t.original_amount) / lwp.TPA_Abs_Total)
                END
            ELSE 0
        END as tpa_share,
        CASE 
            WHEN lwp.total_min_at_level > 0 THEN
                CASE 
                    WHEN lwp.remaining_amount < lwp.total_min_at_level
                    THEN (lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level)) * (ABS(l.original_amount) / lwp.TPL_Abs_Total)
                    ELSE lwp.min_allocation * (ABS(l.original_amount) / lwp.TPL_Abs_Total)
                END
            ELSE 0
        END as tpl_share
    FROM #TPA_Journal t
    JOIN #TPL_Journal l ON t.isin = l.isin 
        AND t.ProdLevel2 = l.ProdLevel2 AND t.ProdLevel3 = l.ProdLevel3 
        AND t.ProdLevel4 = l.ProdLevel4 AND t.ProdLevel5 = l.ProdLevel5 
        AND t.ProdLevel6 = l.ProdLevel6 AND t.ProdLevel7 = l.ProdLevel7 
        AND t.ProdLevel8 = l.ProdLevel8
    JOIN Level8_WithProration lwp ON t.isin = lwp.isin 
        AND t.ProdLevel2 = lwp.ProdLevel2 AND t.ProdLevel3 = lwp.ProdLevel3 
        AND t.ProdLevel4 = lwp.ProdLevel4 AND t.ProdLevel5 = lwp.ProdLevel5 
        AND t.ProdLevel6 = lwp.ProdLevel6 AND t.ProdLevel7 = lwp.ProdLevel7 
        AND t.ProdLevel8 = lwp.ProdLevel8
)
INSERT INTO #Level8_Allocations
SELECT isin, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, tpa_share, tpl_share
FROM Level8_Distribution 
WHERE tpa_share > 0 OR tpl_share > 0;

UPDATE t SET allocated_amount = t.allocated_amount + l8.tpa_share FROM #TPA_Journal t JOIN #Level8_Allocations l8 ON t.isin = l8.isin AND t.ProdLevel2 = l8.ProdLevel2 AND t.ProdLevel3 = l8.ProdLevel3 AND t.ProdLevel4 = l8.ProdLevel4 AND t.ProdLevel5 = l8.ProdLevel5 AND t.ProdLevel6 = l8.ProdLevel6 AND t.ProdLevel7 = l8.ProdLevel7 AND t.ProdLevel8 = l8.ProdLevel8 AND t.ProdLevel9 = l8.ProdLevel9 AND t.ProdLevel10 = l8.ProdLevel10;
UPDATE l SET allocated_amount = l.allocated_amount + l8.tpl_share FROM #TPL_Journal l JOIN #Level8_Allocations l8 ON l.isin = l8.isin AND l.ProdLevel2 = l8.ProdLevel2 AND l.ProdLevel3 = l8.ProdLevel3 AND l.ProdLevel4 = l8.ProdLevel4 AND l.ProdLevel5 = l8.ProdLevel5 AND l.ProdLevel6 = l8.ProdLevel6 AND l.ProdLevel7 = l8.ProdLevel7 AND l.ProdLevel8 = l8.ProdLevel8 AND l.ProdLevel9 = l8.ProdLevel9 AND l.ProdLevel10 = l8.ProdLevel10;
UPDATE #RemainingAmount SET remaining_amount = remaining_amount - (SELECT ISNULL(SUM(tpa_share), 0) FROM #Level8_Allocations);
DROP TABLE #Level8_Allocations;

-- ==================== LEVEL 7 ALLOCATION ====================
CREATE TABLE #Level7_Allocations (
    isin VARCHAR(20),
    ProdLevel2 VARCHAR(50), ProdLevel3 VARCHAR(50), ProdLevel4 VARCHAR(50), 
    ProdLevel5 VARCHAR(50), ProdLevel6 VARCHAR(50), ProdLevel7 VARCHAR(50), 
    ProdLevel8 VARCHAR(50), ProdLevel9 VARCHAR(50), ProdLevel10 VARCHAR(50),
    tpa_share DECIMAL(20,4),
    tpl_share DECIMAL(20,4)
);

WITH Level7_Aggregated AS (
    SELECT 
        t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6, t.ProdLevel7,
        SUM(ABS(t.original_amount)) as TPA_Abs_Total,
        SUM(ABS(l.original_amount)) as TPL_Abs_Total
    FROM #TPA_Journal t
    JOIN #TPL_Journal l ON t.isin = l.isin 
        AND t.ProdLevel2 = l.ProdLevel2 AND t.ProdLevel3 = l.ProdLevel3 
        AND t.ProdLevel4 = l.ProdLevel4 AND t.ProdLevel5 = l.ProdLevel5 
        AND t.ProdLevel6 = l.ProdLevel6 AND t.ProdLevel7 = l.ProdLevel7
    GROUP BY t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6, t.ProdLevel7
    HAVING SUM(ABS(t.original_amount)) > 0 AND SUM(ABS(l.original_amount)) > 0
),
Level7_WithProration AS (
    SELECT 
        la.*,
        CASE WHEN la.TPA_Abs_Total < la.TPL_Abs_Total THEN la.TPA_Abs_Total ELSE la.TPL_Abs_Total END as min_allocation,
        ra.remaining_amount,
        SUM(CASE WHEN la.TPA_Abs_Total < la.TPL_Abs_Total THEN la.TPA_Abs_Total ELSE la.TPL_Abs_Total END) OVER (PARTITION BY la.isin) as total_min_at_level
    FROM Level7_Aggregated la
    JOIN #RemainingAmount ra ON la.isin = ra.isin
),
Level7_Distribution AS (
    SELECT 
        t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6, t.ProdLevel7, t.ProdLevel8, t.ProdLevel9, t.ProdLevel10,
        CASE 
            WHEN lwp.total_min_at_level > 0 THEN
                CASE 
                    WHEN lwp.remaining_amount < lwp.total_min_at_level
                    THEN (lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level)) * (ABS(t.original_amount) / lwp.TPA_Abs_Total)
                    ELSE lwp.min_allocation * (ABS(t.original_amount) / lwp.TPA_Abs_Total)
                END
            ELSE 0
        END as tpa_share,
        CASE 
            WHEN lwp.total_min_at_level > 0 THEN
                CASE 
                    WHEN lwp.remaining_amount < lwp.total_min_at_level
                    THEN (lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level)) * (ABS(l.original_amount) / lwp.TPL_Abs_Total)
                    ELSE lwp.min_allocation * (ABS(l.original_amount) / lwp.TPL_Abs_Total)
                END
            ELSE 0
        END as tpl_share
    FROM #TPA_Journal t
    JOIN #TPL_Journal l ON t.isin = l.isin 
        AND t.ProdLevel2 = l.ProdLevel2 AND t.ProdLevel3 = l.ProdLevel3 
        AND t.ProdLevel4 = l.ProdLevel4 AND t.ProdLevel5 = l.ProdLevel5 
        AND t.ProdLevel6 = l.ProdLevel6 AND t.ProdLevel7 = l.ProdLevel7
    JOIN Level7_WithProration lwp ON t.isin = lwp.isin 
        AND t.ProdLevel2 = lwp.ProdLevel2 AND t.ProdLevel3 = lwp.ProdLevel3 
        AND t.ProdLevel4 = lwp.ProdLevel4 AND t.ProdLevel5 = lwp.ProdLevel5 
        AND t.ProdLevel6 = lwp.ProdLevel6 AND t.ProdLevel7 = lwp.ProdLevel7
)
INSERT INTO #Level7_Allocations
SELECT isin, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, tpa_share, tpl_share
FROM Level7_Distribution 
WHERE tpa_share > 0 OR tpl_share > 0;

UPDATE t SET allocated_amount = t.allocated_amount + l7.tpa_share FROM #TPA_Journal t JOIN #Level7_Allocations l7 ON t.isin = l7.isin AND t.ProdLevel2 = l7.ProdLevel2 AND t.ProdLevel3 = l7.ProdLevel3 AND t.ProdLevel4 = l7.ProdLevel4 AND t.ProdLevel5 = l7.ProdLevel5 AND t.ProdLevel6 = l7.ProdLevel6 AND t.ProdLevel7 = l7.ProdLevel7 AND t.ProdLevel8 = l7.ProdLevel8 AND t.ProdLevel9 = l7.ProdLevel9 AND t.ProdLevel10 = l7.ProdLevel10;
UPDATE l SET allocated_amount = l.allocated_amount + l7.tpl_share FROM #TPL_Journal l JOIN #Level7_Allocations l7 ON l.isin = l7.isin AND l.ProdLevel2 = l7.ProdLevel2 AND l.ProdLevel3 = l7.ProdLevel3 AND l.ProdLevel4 = l7.ProdLevel4 AND l.ProdLevel5 = l7.ProdLevel5 AND l.ProdLevel6 = l7.ProdLevel6 AND l.ProdLevel7 = l7.ProdLevel7 AND l.ProdLevel8 = l7.ProdLevel8 AND l.ProdLevel9 = l7.ProdLevel9 AND l.ProdLevel10 = l7.ProdLevel10;
UPDATE #RemainingAmount SET remaining_amount = remaining_amount - (SELECT ISNULL(SUM(tpa_share), 0) FROM #Level7_Allocations);
DROP TABLE #Level7_Allocations;

-- ==================== LEVEL 6 ALLOCATION ====================
CREATE TABLE #Level6_Allocations (
    isin VARCHAR(20),
    ProdLevel2 VARCHAR(50), ProdLevel3 VARCHAR(50), ProdLevel4 VARCHAR(50), 
    ProdLevel5 VARCHAR(50), ProdLevel6 VARCHAR(50), ProdLevel7 VARCHAR(50), 
    ProdLevel8 VARCHAR(50), ProdLevel9 VARCHAR(50), ProdLevel10 VARCHAR(50),
    tpa_share DECIMAL(20,4),
    tpl_share DECIMAL(20,4)
);

WITH Level6_Aggregated AS (
    SELECT 
        t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6,
        SUM(ABS(t.original_amount)) as TPA_Abs_Total,
        SUM(ABS(l.original_amount)) as TPL_Abs_Total
    FROM #TPA_Journal t
    JOIN #TPL_Journal l ON t.isin = l.isin 
        AND t.ProdLevel2 = l.ProdLevel2 AND t.ProdLevel3 = l.ProdLevel3 
        AND t.ProdLevel4 = l.ProdLevel4 AND t.ProdLevel5 = l.ProdLevel5 
        AND t.ProdLevel6 = l.ProdLevel6
    GROUP BY t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6
    HAVING SUM(ABS(t.original_amount)) > 0 AND SUM(ABS(l.original_amount)) > 0
),
Level6_WithProration AS (
    SELECT 
        la.*,
        CASE WHEN la.TPA_Abs_Total < la.TPL_Abs_Total THEN la.TPA_Abs_Total ELSE la.TPL_Abs_Total END as min_allocation,
        ra.remaining_amount,
        SUM(CASE WHEN la.TPA_Abs_Total < la.TPL_Abs_Total THEN la.TPA_Abs_Total ELSE la.TPL_Abs_Total END) OVER (PARTITION BY la.isin) as total_min_at_level
    FROM Level6_Aggregated la
    JOIN #RemainingAmount ra ON la.isin = ra.isin
),
Level6_Distribution AS (
    SELECT 
        t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6, t.ProdLevel7, t.ProdLevel8, t.ProdLevel9, t.ProdLevel10,
        CASE 
            WHEN lwp.total_min_at_level > 0 THEN
                CASE 
                    WHEN lwp.remaining_amount < lwp.total_min_at_level
                    THEN (lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level)) * (ABS(t.original_amount) / lwp.TPA_Abs_Total)
                    ELSE lwp.min_allocation * (ABS(t.original_amount) / lwp.TPA_Abs_Total)
                END
            ELSE 0
        END as tpa_share,
        CASE 
            WHEN lwp.total_min_at_level > 0 THEN
                CASE 
                    WHEN lwp.remaining_amount < lwp.total_min_at_level
                    THEN (lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level)) * (ABS(l.original_amount) / lwp.TPL_Abs_Total)
                    ELSE lwp.min_allocation * (ABS(l.original_amount) / lwp.TPL_Abs_Total)
                END
            ELSE 0
        END as tpl_share
    FROM #TPA_Journal t
    JOIN #TPL_Journal l ON t.isin = l.isin 
        AND t.ProdLevel2 = l.ProdLevel2 AND t.ProdLevel3 = l.ProdLevel3 
        AND t.ProdLevel4 = l.ProdLevel4 AND t.ProdLevel5 = l.ProdLevel5 
        AND t.ProdLevel6 = l.ProdLevel6
    JOIN Level6_WithProration lwp ON t.isin = lwp.isin 
        AND t.ProdLevel2 = lwp.ProdLevel2 AND t.ProdLevel3 = lwp.ProdLevel3 
        AND t.ProdLevel4 = lwp.ProdLevel4 AND t.ProdLevel5 = lwp.ProdLevel5 
        AND t.ProdLevel6 = lwp.ProdLevel6
)
INSERT INTO #Level6_Allocations
SELECT isin, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, tpa_share, tpl_share
FROM Level6_Distribution 
WHERE tpa_share > 0 OR tpl_share > 0;

UPDATE t SET allocated_amount = t.allocated_amount + l6.tpa_share FROM #TPA_Journal t JOIN #Level6_Allocations l6 ON t.isin = l6.isin AND t.ProdLevel2 = l6.ProdLevel2 AND t.ProdLevel3 = l6.ProdLevel3 AND t.ProdLevel4 = l6.ProdLevel4 AND t.ProdLevel5 = l6.ProdLevel5 AND t.ProdLevel6 = l6.ProdLevel6 AND t.ProdLevel7 = l6.ProdLevel7 AND t.ProdLevel8 = l6.ProdLevel8 AND t.ProdLevel9 = l6.ProdLevel9 AND t.ProdLevel10 = l6.ProdLevel10;
UPDATE l SET allocated_amount = l.allocated_amount + l6.tpl_share FROM #TPL_Journal l JOIN #Level6_Allocations l6 ON l.isin = l6.isin AND l.ProdLevel2 = l6.ProdLevel2 AND l.ProdLevel3 = l6.ProdLevel3 AND l.ProdLevel4 = l6.ProdLevel4 AND l.ProdLevel5 = l6.ProdLevel5 AND l.ProdLevel6 = l6.ProdLevel6 AND l.ProdLevel7 = l6.ProdLevel7 AND l.ProdLevel8 = l6.ProdLevel8 AND l.ProdLevel9 = l6.ProdLevel9 AND l.ProdLevel10 = l6.ProdLevel10;
UPDATE #RemainingAmount SET remaining_amount = remaining_amount - (SELECT ISNULL(SUM(tpa_share), 0) FROM #Level6_Allocations);
DROP TABLE #Level6_Allocations;

-- ==================== LEVEL 5 ALLOCATION ====================
CREATE TABLE #Level5_Allocations (
    isin VARCHAR(20),
    ProdLevel2 VARCHAR(50), ProdLevel3 VARCHAR(50), ProdLevel4 VARCHAR(50), 
    ProdLevel5 VARCHAR(50), ProdLevel6 VARCHAR(50), ProdLevel7 VARCHAR(50), 
    ProdLevel8 VARCHAR(50), ProdLevel9 VARCHAR(50), ProdLevel10 VARCHAR(50),
    tpa_share DECIMAL(20,4),
    tpl_share DECIMAL(20,4)
);

WITH Level5_Aggregated AS (
    SELECT 
        t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5,
        SUM(ABS(t.original_amount)) as TPA_Abs_Total,
        SUM(ABS(l.original_amount)) as TPL_Abs_Total
    FROM #TPA_Journal t
    JOIN #TPL_Journal l ON t.isin = l.isin 
        AND t.ProdLevel2 = l.ProdLevel2 AND t.ProdLevel3 = l.ProdLevel3 
        AND t.ProdLevel4 = l.ProdLevel4 AND t.ProdLevel5 = l.ProdLevel5
    GROUP BY t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5
    HAVING SUM(ABS(t.original_amount)) > 0 AND SUM(ABS(l.original_amount)) > 0
),
Level5_WithProration AS (
    SELECT 
        la.*,
        CASE WHEN la.TPA_Abs_Total < la.TPL_Abs_Total THEN la.TPA_Abs_Total ELSE la.TPL_Abs_Total END as min_allocation,
        ra.remaining_amount,
        SUM(CASE WHEN la.TPA_Abs_Total < la.TPL_Abs_Total THEN la.TPA_Abs_Total ELSE la.TPL_Abs_Total END) OVER (PARTITION BY la.isin) as total_min_at_level
    FROM Level5_Aggregated la
    JOIN #RemainingAmount ra ON la.isin = ra.isin
),
Level5_Distribution AS (
    SELECT 
        t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6, t.ProdLevel7, t.ProdLevel8, t.ProdLevel9, t.ProdLevel10,
        CASE 
            WHEN lwp.total_min_at_level > 0 THEN
                CASE 
                    WHEN lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level) < lwp.min_allocation
                    THEN (lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level)) * (ABS(t.original_amount) / lwp.TPA_Abs_Total)
                    ELSE lwp.min_allocation * (ABS(t.original_amount) / lwp.TPA_Abs_Total)
                END
            ELSE 0
        END as tpa_share,
        CASE 
            WHEN lwp.total_min_at_level > 0 THEN
                CASE 
                    WHEN lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level) < lwp.min_allocation
                    THEN (lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level)) * (ABS(l.original_amount) / lwp.TPL_Abs_Total)
                    ELSE lwp.min_allocation * (ABS(l.original_amount) / lwp.TPL_Abs_Total)
                END
            ELSE 0
        END as tpl_share
    FROM #TPA_Journal t
    JOIN #TPL_Journal l ON t.isin = l.isin 
        AND t.ProdLevel2 = l.ProdLevel2 AND t.ProdLevel3 = l.ProdLevel3 
        AND t.ProdLevel4 = l.ProdLevel4 AND t.ProdLevel5 = l.ProdLevel5
    JOIN Level5_WithProration lwp ON t.isin = lwp.isin 
        AND t.ProdLevel2 = lwp.ProdLevel2 AND t.ProdLevel3 = lwp.ProdLevel3 
        AND t.ProdLevel4 = lwp.ProdLevel4 AND t.ProdLevel5 = lwp.ProdLevel5
)
INSERT INTO #Level5_Allocations
SELECT isin, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, tpa_share, tpl_share
FROM Level5_Distribution 
WHERE tpa_share > 0 OR tpl_share > 0;

UPDATE t SET allocated_amount = t.allocated_amount + l5.tpa_share FROM #TPA_Journal t JOIN #Level5_Allocations l5 ON t.isin = l5.isin AND t.ProdLevel2 = l5.ProdLevel2 AND t.ProdLevel3 = l5.ProdLevel3 AND t.ProdLevel4 = l5.ProdLevel4 AND t.ProdLevel5 = l5.ProdLevel5 AND t.ProdLevel6 = l5.ProdLevel6 AND t.ProdLevel7 = l5.ProdLevel7 AND t.ProdLevel8 = l5.ProdLevel8 AND t.ProdLevel9 = l5.ProdLevel9 AND t.ProdLevel10 = l5.ProdLevel10;
UPDATE l SET allocated_amount = l.allocated_amount + l5.tpl_share FROM #TPL_Journal l JOIN #Level5_Allocations l5 ON l.isin = l5.isin AND l.ProdLevel2 = l5.ProdLevel2 AND l.ProdLevel3 = l5.ProdLevel3 AND l.ProdLevel4 = l5.ProdLevel4 AND l.ProdLevel5 = l5.ProdLevel5 AND l.ProdLevel6 = l5.ProdLevel6 AND l.ProdLevel7 = l5.ProdLevel7 AND l.ProdLevel8 = l5.ProdLevel8 AND l.ProdLevel9 = l5.ProdLevel9 AND l.ProdLevel10 = l5.ProdLevel10;
UPDATE #RemainingAmount SET remaining_amount = remaining_amount - (SELECT ISNULL(SUM(tpa_share), 0) FROM #Level5_Allocations);
DROP TABLE #Level5_Allocations;

-- ==================== LEVEL 4 ALLOCATION ====================
CREATE TABLE #Level4_Allocations (
    isin VARCHAR(20),
    ProdLevel2 VARCHAR(50), ProdLevel3 VARCHAR(50), ProdLevel4 VARCHAR(50), 
    ProdLevel5 VARCHAR(50), ProdLevel6 VARCHAR(50), ProdLevel7 VARCHAR(50), 
    ProdLevel8 VARCHAR(50), ProdLevel9 VARCHAR(50), ProdLevel10 VARCHAR(50),
    tpa_share DECIMAL(20,4),
    tpl_share DECIMAL(20,4)
);

WITH Level4_Aggregated AS (
    SELECT 
        t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4,
        SUM(ABS(t.original_amount)) as TPA_Abs_Total,
        SUM(ABS(l.original_amount)) as TPL_Abs_Total
    FROM #TPA_Journal t
    JOIN #TPL_Journal l ON t.isin = l.isin 
        AND t.ProdLevel2 = l.ProdLevel2 AND t.ProdLevel3 = l.ProdLevel3 
        AND t.ProdLevel4 = l.ProdLevel4
    GROUP BY t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4
    HAVING SUM(ABS(t.original_amount)) > 0 AND SUM(ABS(l.original_amount)) > 0
),
Level4_WithProration AS (
    SELECT 
        la.*,
        CASE WHEN la.TPA_Abs_Total < la.TPL_Abs_Total THEN la.TPA_Abs_Total ELSE la.TPL_Abs_Total END as min_allocation,
        ra.remaining_amount,
        SUM(CASE WHEN la.TPA_Abs_Total < la.TPL_Abs_Total THEN la.TPA_Abs_Total ELSE la.TPL_Abs_Total END) OVER (PARTITION BY la.isin) as total_min_at_level
    FROM Level4_Aggregated la
    JOIN #RemainingAmount ra ON la.isin = ra.isin
),
Level4_Distribution AS (
    SELECT 
        t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6, t.ProdLevel7, t.ProdLevel8, t.ProdLevel9, t.ProdLevel10,
        CASE 
            WHEN lwp.total_min_at_level > 0 THEN
                CASE 
                    WHEN lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level) < lwp.min_allocation
                    THEN (lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level)) * (ABS(t.original_amount) / lwp.TPA_Abs_Total)
                    ELSE lwp.min_allocation * (ABS(t.original_amount) / lwp.TPA_Abs_Total)
                END
            ELSE 0
        END as tpa_share,
        CASE 
            WHEN lwp.total_min_at_level > 0 THEN
                CASE 
                    WHEN lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level) < lwp.min_allocation
                    THEN (lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level)) * (ABS(l.original_amount) / lwp.TPL_Abs_Total)
                    ELSE lwp.min_allocation * (ABS(l.original_amount) / lwp.TPL_Abs_Total)
                END
            ELSE 0
        END as tpl_share
    FROM #TPA_Journal t
    JOIN #TPL_Journal l ON t.isin = l.isin 
        AND t.ProdLevel2 = l.ProdLevel2 AND t.ProdLevel3 = l.ProdLevel3 
        AND t.ProdLevel4 = l.ProdLevel4
    JOIN Level4_WithProration lwp ON t.isin = lwp.isin 
        AND t.ProdLevel2 = lwp.ProdLevel2 AND t.ProdLevel3 = lwp.ProdLevel3 
        AND t.ProdLevel4 = lwp.ProdLevel4
)
INSERT INTO #Level4_Allocations
SELECT isin, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, tpa_share, tpl_share
FROM Level4_Distribution 
WHERE tpa_share > 0 OR tpl_share > 0;

UPDATE t SET allocated_amount = t.allocated_amount + l4.tpa_share FROM #TPA_Journal t JOIN #Level4_Allocations l4 ON t.isin = l4.isin AND t.ProdLevel2 = l4.ProdLevel2 AND t.ProdLevel3 = l4.ProdLevel3 AND t.ProdLevel4 = l4.ProdLevel4 AND t.ProdLevel5 = l4.ProdLevel5 AND t.ProdLevel6 = l4.ProdLevel6 AND t.ProdLevel7 = l4.ProdLevel7 AND t.ProdLevel8 = l4.ProdLevel8 AND t.ProdLevel9 = l4.ProdLevel9 AND t.ProdLevel10 = l4.ProdLevel10;
UPDATE l SET allocated_amount = l.allocated_amount + l4.tpl_share FROM #TPL_Journal l JOIN #Level4_Allocations l4 ON l.isin = l4.isin AND l.ProdLevel2 = l4.ProdLevel2 AND l.ProdLevel3 = l4.ProdLevel3 AND l.ProdLevel4 = l4.ProdLevel4 AND l.ProdLevel5 = l4.ProdLevel5 AND l.ProdLevel6 = l4.ProdLevel6 AND l.ProdLevel7 = l4.ProdLevel7 AND l.ProdLevel8 = l4.ProdLevel8 AND l.ProdLevel9 = l4.ProdLevel9 AND l.ProdLevel10 = l4.ProdLevel10;
UPDATE #RemainingAmount SET remaining_amount = remaining_amount - (SELECT ISNULL(SUM(tpa_share), 0) FROM #Level4_Allocations);
DROP TABLE #Level4_Allocations;

-- ==================== LEVEL 3 ALLOCATION ====================
CREATE TABLE #Level3_Allocations (
    isin VARCHAR(20),
    ProdLevel2 VARCHAR(50), ProdLevel3 VARCHAR(50), ProdLevel4 VARCHAR(50), 
    ProdLevel5 VARCHAR(50), ProdLevel6 VARCHAR(50), ProdLevel7 VARCHAR(50), 
    ProdLevel8 VARCHAR(50), ProdLevel9 VARCHAR(50), ProdLevel10 VARCHAR(50),
    tpa_share DECIMAL(20,4),
    tpl_share DECIMAL(20,4)
);

WITH Level3_Aggregated AS (
    SELECT 
        t.isin, t.ProdLevel2, t.ProdLevel3,
        SUM(ABS(t.original_amount)) as TPA_Abs_Total,
        SUM(ABS(l.original_amount)) as TPL_Abs_Total
    FROM #TPA_Journal t
    JOIN #TPL_Journal l ON t.isin = l.isin 
        AND t.ProdLevel2 = l.ProdLevel2 AND t.ProdLevel3 = l.ProdLevel3
    GROUP BY t.isin, t.ProdLevel2, t.ProdLevel3
    HAVING SUM(ABS(t.original_amount)) > 0 AND SUM(ABS(l.original_amount)) > 0
),
Level3_WithProration AS (
    SELECT 
        la.*,
        CASE WHEN la.TPA_Abs_Total < la.TPL_Abs_Total THEN la.TPA_Abs_Total ELSE la.TPL_Abs_Total END as min_allocation,
        ra.remaining_amount,
        SUM(CASE WHEN la.TPA_Abs_Total < la.TPL_Abs_Total THEN la.TPA_Abs_Total ELSE la.TPL_Abs_Total END) OVER (PARTITION BY la.isin) as total_min_at_level
    FROM Level3_Aggregated la
    JOIN #RemainingAmount ra ON la.isin = ra.isin
),
Level3_Distribution AS (
    SELECT 
        t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6, t.ProdLevel7, t.ProdLevel8, t.ProdLevel9, t.ProdLevel10,
        CASE 
            WHEN lwp.total_min_at_level > 0 THEN
                CASE 
                    WHEN lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level) < lwp.min_allocation
                    THEN (lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level)) * (ABS(t.original_amount) / lwp.TPA_Abs_Total)
                    ELSE lwp.min_allocation * (ABS(t.original_amount) / lwp.TPA_Abs_Total)
                END
            ELSE 0
        END as tpa_share,
        CASE 
            WHEN lwp.total_min_at_level > 0 THEN
                CASE 
                    WHEN lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level) < lwp.min_allocation
                    THEN (lwp.remaining_amount * (lwp.min_allocation / lwp.total_min_at_level)) * (ABS(l.original_amount) / lwp.TPL_Abs_Total)
                    ELSE lwp.min_allocation * (ABS(l.original_amount) / lwp.TPL_Abs_Total)
                END
            ELSE 0
        END as tpl_share
    FROM #TPA_Journal t
    JOIN #TPL_Journal l ON t.isin = l.isin 
        AND t.ProdLevel2 = l.ProdLevel2 AND t.ProdLevel3 = l.ProdLevel3
    JOIN Level3_WithProration lwp ON t.isin = lwp.isin 
        AND t.ProdLevel2 = lwp.ProdLevel2 AND t.ProdLevel3 = lwp.ProdLevel3
)
INSERT INTO #Level3_Allocations
SELECT isin, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, tpa_share, tpl_share
FROM Level3_Distribution 
WHERE tpa_share > 0 OR tpl_share > 0;

UPDATE t SET allocated_amount = t.allocated_amount + l3.tpa_share FROM #TPA_Journal t JOIN #Level3_Allocations l3 ON t.isin = l3.isin AND t.ProdLevel2 = l3.ProdLevel2 AND t.ProdLevel3 = l3.ProdLevel3 AND t.ProdLevel4 = l3.ProdLevel4 AND t.ProdLevel5 = l3.ProdLevel5 AND t.ProdLevel6 = l3.ProdLevel6 AND t.ProdLevel7 = l3.ProdLevel7 AND t.ProdLevel8 = l3.ProdLevel8 AND t.ProdLevel9 = l3.ProdLevel9 AND t.ProdLevel10 = l3.ProdLevel10;
UPDATE l SET allocated_amount = l.allocated_amount + l3.tpl_share FROM #TPL_Journal l JOIN #Level3_Allocations l3 ON l.isin = l3.isin AND l.ProdLevel2 = l3.ProdLevel2 AND l.ProdLevel3 = l3.ProdLevel3 AND l.ProdLevel4 = l3.ProdLevel4 AND l.ProdLevel5 = l3.ProdLevel5 AND l.ProdLevel6 = l3.ProdLevel6 AND l.ProdLevel7 = l3.ProdLevel7 AND l.ProdLevel8 = l3.ProdLevel8 AND l.ProdLevel9 = l3.ProdLevel9 AND l.ProdLevel10 = l3.ProdLevel10;
UPDATE #RemainingAmount SET remaining_amount = remaining_amount - (SELECT ISNULL(SUM(tpa_share), 0) FROM #Level3_Allocations);
DROP TABLE #Level3_Allocations;

-- ==================== LEVEL 2 ALLOCATION (FINAL - ALLOCATE ALL REMAINING) ====================
CREATE TABLE #Level2_Allocations (
    isin VARCHAR(20),
    ProdLevel2 VARCHAR(50), ProdLevel3 VARCHAR(50), ProdLevel4 VARCHAR(50), 
    ProdLevel5 VARCHAR(50), ProdLevel6 VARCHAR(50), ProdLevel7 VARCHAR(50), 
    ProdLevel8 VARCHAR(50), ProdLevel9 VARCHAR(50), ProdLevel10 VARCHAR(50),
    tpa_share DECIMAL(20,4),
    tpl_share DECIMAL(20,4)
);

-- At Level 2, split the FULL remaining amount between TPA and TPL based on their capacity
WITH Level2_Totals AS (
    SELECT 
        ra.isin,
        SUM(ABS(t.original_amount)) as Total_TPA_Abs,
        SUM(ABS(l.original_amount)) as Total_TPL_Abs,
        ra.remaining_amount
    FROM #RemainingAmount ra
    CROSS JOIN #TPA_Journal t
    CROSS JOIN #TPL_Journal l
    WHERE t.isin = ra.isin AND l.isin = ra.isin
    GROUP BY ra.isin, ra.remaining_amount
),
Level2_Splits AS (
    SELECT *,
        -- Split remaining amount based on relative capacity (TPA vs TPL)
        remaining_amount * (Total_TPA_Abs / (Total_TPA_Abs + Total_TPL_Abs)) as TPA_Total_Allocation,
        remaining_amount * (Total_TPL_Abs / (Total_TPA_Abs + Total_TPL_Abs)) as TPL_Total_Allocation
    FROM Level2_Totals
),
Level2_Distribution AS (
    SELECT 
        t.isin, t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6, t.ProdLevel7, t.ProdLevel8, t.ProdLevel9, t.ProdLevel10,
        -- TPA gets its proportional share of the TPA allocation
        CASE 
            WHEN ls.Total_TPA_Abs > 0 THEN 
                ls.TPA_Total_Allocation * (ABS(t.original_amount) / ls.Total_TPA_Abs)
            ELSE 0
        END as tpa_share,
        0 as tpl_share
    FROM #TPA_Journal t
    JOIN Level2_Splits ls ON t.isin = ls.isin

    UNION ALL

    SELECT 
        l.isin, l.ProdLevel2, l.ProdLevel3, l.ProdLevel4, l.ProdLevel5, l.ProdLevel6, l.ProdLevel7, l.ProdLevel8, l.ProdLevel9, l.ProdLevel10,
        0 as tpa_share,
        -- TPL gets its proportional share of the TPL allocation
        CASE 
            WHEN ls.Total_TPL_Abs > 0 THEN 
                ls.TPL_Total_Allocation * (ABS(l.original_amount) / ls.Total_TPL_Abs)
            ELSE 0
        END as tpl_share
    FROM #TPL_Journal l  
    JOIN Level2_Splits ls ON l.isin = ls.isin
)
INSERT INTO #Level2_Allocations
SELECT isin, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, 
       ISNULL(tpa_share, 0), ISNULL(tpl_share, 0)
FROM Level2_Distribution;

-- Update TPA Journal - only update rows where tpa_share > 0
UPDATE t 
SET allocated_amount = t.allocated_amount + l2.tpa_share 
FROM #TPA_Journal t 
JOIN #Level2_Allocations l2 ON t.isin = l2.isin 
    AND t.ProdLevel2 = l2.ProdLevel2 AND t.ProdLevel3 = l2.ProdLevel3 
    AND t.ProdLevel4 = l2.ProdLevel4 AND t.ProdLevel5 = l2.ProdLevel5 
    AND t.ProdLevel6 = l2.ProdLevel6 AND t.ProdLevel7 = l2.ProdLevel7 
    AND t.ProdLevel8 = l2.ProdLevel8 AND t.ProdLevel9 = l2.ProdLevel9 
    AND t.ProdLevel10 = l2.ProdLevel10
WHERE l2.tpa_share > 0;

-- Update TPL Journal - only update rows where tpl_share > 0
UPDATE l 
SET allocated_amount = l.allocated_amount + l2.tpl_share 
FROM #TPL_Journal l 
JOIN #Level2_Allocations l2 ON l.isin = l2.isin 
    AND l.ProdLevel2 = l2.ProdLevel2 AND l.ProdLevel3 = l2.ProdLevel3 
    AND l.ProdLevel4 = l2.ProdLevel4 AND l.ProdLevel5 = l2.ProdLevel5 
    AND l.ProdLevel6 = l2.ProdLevel6 AND l.ProdLevel7 = l2.ProdLevel7 
    AND l.ProdLevel8 = l2.ProdLevel8 AND l.ProdLevel9 = l2.ProdLevel9 
    AND l.ProdLevel10 = l2.ProdLevel10
WHERE l2.tpl_share > 0;

UPDATE #RemainingAmount SET remaining_amount = 0;  -- All remaining amount is now allocated
DROP TABLE #Level2_Allocations;

-- ==================== FINAL RESULTS ====================

-- TPA Journal (Original 10 rows with allocated amounts)
SELECT 
    'TPA_JOURNAL' as journal_type,
    ROW_NUMBER() OVER (ORDER BY ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10) as row_id,
    isin,
    ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10,
    original_amount,
    allocated_amount,
    CASE WHEN original_amount >= 0 THEN allocated_amount ELSE -allocated_amount END as journal_amount
FROM #TPA_Journal
ORDER BY ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10;

-- TPL Journal (Original 12 rows with allocated amounts)
SELECT 
    'TPL_JOURNAL' as journal_type,
    ROW_NUMBER() OVER (ORDER BY ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10) as row_id,
    isin,
    ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10,
    original_amount,
    allocated_amount,
    CASE WHEN original_amount >= 0 THEN -allocated_amount ELSE allocated_amount END as journal_amount
FROM #TPL_Journal
ORDER BY ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10;

-- Summary and Validation
SELECT 
    'ALLOCATION_SUMMARY' as summary_type,
    (SELECT CrossEntityNetting FROM CrossEntityNetting) as original_cross_entity_amount,
    (SELECT SUM(allocated_amount) FROM #TPA_Journal) as total_tpa_allocated,
    (SELECT SUM(allocated_amount) FROM #TPL_Journal) as total_tpl_allocated,
    (SELECT SUM(allocated_amount) FROM #TPA_Journal) + (SELECT SUM(allocated_amount) FROM #TPL_Journal) as total_allocated,
    (SELECT remaining_amount FROM #RemainingAmount) as remaining_unallocated,
    (SELECT COUNT(*) FROM #TPA_Journal) as tpa_rows,
    (SELECT COUNT(*) FROM #TPL_Journal) as tpl_rows;

-- Clean up
DROP TABLE #RemainingAmount;
DROP TABLE #TPA_Journal;
DROP TABLE #TPL_Journal;
