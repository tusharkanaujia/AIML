CREATE PROCEDURE sp_AllocateCrossNetting_Hierarchical AS BEGIN SET NOCOUNT ON;

-- Clean up temp tables
IF OBJECT_ID('tempdb..#TPA') IS NOT NULL DROP TABLE #TPA;
IF OBJECT_ID('tempdb..#TPL') IS NOT NULL DROP TABLE #TPL;
IF OBJECT_ID('tempdb..#Remaining') IS NOT NULL DROP TABLE #Remaining;
IF OBJECT_ID('tempdb..#Journal_TPA') IS NOT NULL DROP TABLE #Journal_TPA;
IF OBJECT_ID('tempdb..#Journal_TPL') IS NOT NULL DROP TABLE #Journal_TPL;
IF OBJECT_ID('tempdb..#Validation') IS NOT NULL DROP TABLE #Validation;

-- Prepare staging tables
CREATE TABLE #TPA (
    ISIN VARCHAR(20),
    ProdLevel2 VARCHAR(100), ProdLevel3 VARCHAR(100), ProdLevel4 VARCHAR(100),
    ProdLevel5 VARCHAR(100), ProdLevel6 VARCHAR(100), ProdLevel7 VARCHAR(100),
    ProdLevel8 VARCHAR(100), ProdLevel9 VARCHAR(100), ProdLevel10 VARCHAR(100),
    ProdLevel11 VARCHAR(100),
    TotalAmount DECIMAL(18,2)
);

CREATE TABLE #TPL (
    ISIN VARCHAR(20),
    ProdLevel2 VARCHAR(100), ProdLevel3 VARCHAR(100), ProdLevel4 VARCHAR(100),
    ProdLevel5 VARCHAR(100), ProdLevel6 VARCHAR(100), ProdLevel7 VARCHAR(100),
    ProdLevel8 VARCHAR(100), ProdLevel9 VARCHAR(100), ProdLevel10 VARCHAR(100),
    ProdLevel11 VARCHAR(100),
    TotalAmount DECIMAL(18,2)
);

CREATE TABLE #Remaining (
    ISIN VARCHAR(20) PRIMARY KEY,
    RemainingAmount DECIMAL(18,2)
);

CREATE TABLE #Journal_TPA (
    ISIN VARCHAR(20),
    ProdLevel2 VARCHAR(100), ProdLevel3 VARCHAR(100), ProdLevel4 VARCHAR(100),
    ProdLevel5 VARCHAR(100), ProdLevel6 VARCHAR(100), ProdLevel7 VARCHAR(100),
    ProdLevel8 VARCHAR(100), ProdLevel9 VARCHAR(100), ProdLevel10 VARCHAR(100),
    ProdLevel11 VARCHAR(100),
    AllocatedAmount DECIMAL(18,2),
    BalanceSource VARCHAR(100)
);

CREATE TABLE #Journal_TPL (
    ISIN VARCHAR(20),
    ProdLevel2 VARCHAR(100), ProdLevel3 VARCHAR(100), ProdLevel4 VARCHAR(100),
    ProdLevel5 VARCHAR(100), ProdLevel6 VARCHAR(100), ProdLevel7 VARCHAR(100),
    ProdLevel8 VARCHAR(100), ProdLevel9 VARCHAR(100), ProdLevel10 VARCHAR(100),
    ProdLevel11 VARCHAR(100),
    AllocatedAmount DECIMAL(18,2),
    BalanceSource VARCHAR(100)
);

CREATE TABLE #Validation (
    ISIN VARCHAR(20),
    NettingAmount DECIMAL(18,2),
    TPA_Total DECIMAL(18,2),
    TPL_Total DECIMAL(18,2),
    Difference DECIMAL(18,2)
);

-- Load data
INSERT INTO #TPA
SELECT ISIN, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7,
       ProdLevel8, ProdLevel9, ProdLevel10, ProdLevel11, TotalAmount
FROM BusinessDetails WHERE Type = 'TPA';

INSERT INTO #TPL
SELECT ISIN, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6, ProdLevel7,
       ProdLevel8, ProdLevel9, ProdLevel10, ProdLevel11, TotalAmount
FROM BusinessDetails WHERE Type = 'TPL';

INSERT INTO #Remaining
SELECT ISIN, GBPIFRSBalanceSheetAmount FROM CrossNetting;

-- Build all possible matches with level priority
;WITH TPA_AllPaths AS (
    SELECT 
        t.ISIN,
        ABS(t.TotalAmount) AS AbsTPA,
        t.ProdLevel2, t.ProdLevel3, t.ProdLevel4, t.ProdLevel5, t.ProdLevel6,
        t.ProdLevel7, t.ProdLevel8, t.ProdLevel9, t.ProdLevel10, t.ProdLevel11,
        v.LevelNum,
        CASE v.LevelNum
            WHEN 11 THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4,t.ProdLevel5,t.ProdLevel6,t.ProdLevel7,t.ProdLevel8,t.ProdLevel9,t.ProdLevel10,t.ProdLevel11)
            WHEN 10 THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4,t.ProdLevel5,t.ProdLevel6,t.ProdLevel7,t.ProdLevel8,t.ProdLevel9,t.ProdLevel10)
            WHEN 9  THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4,t.ProdLevel5,t.ProdLevel6,t.ProdLevel7,t.ProdLevel8,t.ProdLevel9)
            WHEN 8  THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4,t.ProdLevel5,t.ProdLevel6,t.ProdLevel7,t.ProdLevel8)
            WHEN 7  THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4,t.ProdLevel5,t.ProdLevel6,t.ProdLevel7)
            WHEN 6  THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4,t.ProdLevel5,t.ProdLevel6)
            WHEN 5  THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4,t.ProdLevel5)
            WHEN 4  THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4)
            WHEN 3  THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3)
            WHEN 2  THEN t.ProdLevel2
        END AS MatchKey
    FROM #TPA t
    CROSS APPLY (VALUES(11),(10),(9),(8),(7),(6),(5),(4),(3),(2)) v(LevelNum)
),
TPL_AllPaths AS (
    SELECT 
        t.ISIN,
        ABS(t.TotalAmount) AS AbsTPL,
        t.ProdLevel2 AS TPL_ProdLevel2, t.ProdLevel3 AS TPL_ProdLevel3, t.ProdLevel4 AS TPL_ProdLevel4,
        t.ProdLevel5 AS TPL_ProdLevel5, t.ProdLevel6 AS TPL_ProdLevel6, t.ProdLevel7 AS TPL_ProdLevel7,
        t.ProdLevel8 AS TPL_ProdLevel8, t.ProdLevel9 AS TPL_ProdLevel9, t.ProdLevel10 AS TPL_ProdLevel10,
        t.ProdLevel11 AS TPL_ProdLevel11,
        v.LevelNum,
        CASE v.LevelNum
            WHEN 11 THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4,t.ProdLevel5,t.ProdLevel6,t.ProdLevel7,t.ProdLevel8,t.ProdLevel9,t.ProdLevel10,t.ProdLevel11)
            WHEN 10 THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4,t.ProdLevel5,t.ProdLevel6,t.ProdLevel7,t.ProdLevel8,t.ProdLevel9,t.ProdLevel10)
            WHEN 9  THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4,t.ProdLevel5,t.ProdLevel6,t.ProdLevel7,t.ProdLevel8,t.ProdLevel9)
            WHEN 8  THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4,t.ProdLevel5,t.ProdLevel6,t.ProdLevel7,t.ProdLevel8)
            WHEN 7  THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4,t.ProdLevel5,t.ProdLevel6,t.ProdLevel7)
            WHEN 6  THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4,t.ProdLevel5,t.ProdLevel6)
            WHEN 5  THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4,t.ProdLevel5)
            WHEN 4  THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3,t.ProdLevel4)
            WHEN 3  THEN CONCAT_WS('|',t.ProdLevel2,t.ProdLevel3)
            WHEN 2  THEN t.ProdLevel2
        END AS MatchKey
    FROM #TPL t
    CROSS APPLY (VALUES(11),(10),(9),(8),(7),(6),(5),(4),(3),(2)) v(LevelNum)
),
Matches AS (
    SELECT
        p.LevelNum,
        p.ISIN,
        p.MatchKey,
        p.ProdLevel2, p.ProdLevel3, p.ProdLevel4, p.ProdLevel5, p.ProdLevel6,
        p.ProdLevel7, p.ProdLevel8, p.ProdLevel9, p.ProdLevel10, p.ProdLevel11,
        q.TPL_ProdLevel2, q.TPL_ProdLevel3, q.TPL_ProdLevel4, q.TPL_ProdLevel5, q.TPL_ProdLevel6,
        q.TPL_ProdLevel7, q.TPL_ProdLevel8, q.TPL_ProdLevel9, q.TPL_ProdLevel10, q.TPL_ProdLevel11,
        p.AbsTPA, q.AbsTPL,
        CASE WHEN p.AbsTPA < q.AbsTPL THEN p.AbsTPA ELSE q.AbsTPL END AS MinAmt
    FROM TPA_AllPaths p
    INNER JOIN TPL_AllPaths q
        ON p.ISIN = q.ISIN
       AND p.LevelNum = q.LevelNum
       AND p.MatchKey = q.MatchKey
),
Alloc AS (
    SELECT
        m.*, r.RemainingAmount,
        SUM(m.MinAmt) OVER (PARTITION BY m.ISIN ORDER BY m.LevelNum DESC, m.MatchKey) AS RunningSum,
        SUM(m.MinAmt) OVER (PARTITION BY m.ISIN ORDER BY m.LevelNum DESC, m.MatchKey ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS PrevSum
    FROM Matches m
    JOIN #Remaining r ON m.ISIN = r.ISIN
),
FinalAlloc AS (
    SELECT *,
        CASE
            WHEN RunningSum <= RemainingAmount THEN MinAmt
            WHEN PrevSum < RemainingAmount THEN RemainingAmount - PrevSum
            ELSE 0
        END AS AllocAmt
    FROM Alloc
)
-- Insert TPA journal
INSERT INTO #Journal_TPA
SELECT
    ISIN, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6,
    ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, ProdLevel11,
    AllocAmt,
    CASE
        WHEN ProdLevel4 IS NOT NULL AND ProdLevel3 IS NOT NULL THEN 'Cross Entity - Business and Diversified'
        WHEN ProdLevel4 IS NOT NULL THEN 'Cross Entity - Business'
        WHEN ProdLevel3 IS NOT NULL THEN 'Cross Entity - Diversified'
        ELSE NULL
    END
FROM FinalAlloc
WHERE AllocAmt > 0;

-- Insert TPL journal
INSERT INTO #Journal_TPL
SELECT
    ISIN, TPL_ProdLevel2, TPL_ProdLevel3, TPL_ProdLevel4, TPL_ProdLevel5, TPL_ProdLevel6,
    TPL_ProdLevel7, TPL_ProdLevel8, TPL_ProdLevel9, TPL_ProdLevel10, TPL_ProdLevel11,
    -AllocAmt,
    CASE
        WHEN TPL_ProdLevel4 IS NOT NULL AND TPL_ProdLevel3 IS NOT NULL THEN 'Cross Entity - Business and Diversified'
        WHEN TPL_ProdLevel4 IS NOT NULL THEN 'Cross Entity - Business'
        WHEN TPL_ProdLevel3 IS NOT NULL THEN 'Cross Entity - Diversified'
        ELSE NULL
    END
FROM FinalAlloc
WHERE AllocAmt > 0;

-- Final validation
INSERT INTO #Validation (ISIN, NettingAmount, TPA_Total, TPL_Total, Difference)
SELECT
    c.ISIN,
    c.GBPIFRSBalanceSheetAmount,
    ISNULL(t.TPA_Total,0),
    ISNULL(p.TPL_Total,0),
    c.GBPIFRSBalanceSheetAmount - ISNULL(t.TPA_Total,0)
FROM CrossNetting c
LEFT JOIN (
    SELECT ISIN, SUM(AllocatedAmount) AS TPA_Total FROM #Journal_TPA GROUP BY ISIN
) t ON c.ISIN = t.ISIN
LEFT JOIN (
    SELECT ISIN, SUM(ABS(AllocatedAmount)) AS TPL_Total FROM #Journal_TPL GROUP BY ISIN
) p ON c.ISIN = p.ISIN;

-- Output results
SELECT 'TPA' AS JournalType, * FROM #Journal_TPA;
SELECT 'TPL' AS JournalType, * FROM #Journal_TPL;
SELECT * FROM #Validation;

END

