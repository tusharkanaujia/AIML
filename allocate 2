-- Updated version of sp_AllocateCrossNetting_Hierarchical to fix overallocation -- Ensures total TPA and TPL allocation does not exceed CrossNetting amount -- Uses row_number to allocate once per path and avoids duplicate use of match keys

CREATE PROCEDURE sp_AllocateCrossNetting_Hierarchical AS BEGIN SET NOCOUNT ON;

IF OBJECT_ID('tempdb..#TPA') IS NOT NULL DROP TABLE #TPA;
IF OBJECT_ID('tempdb..#TPL') IS NOT NULL DROP TABLE #TPL;
IF OBJECT_ID('tempdb..#CrossNetting') IS NOT NULL DROP TABLE #CrossNetting;
IF OBJECT_ID('tempdb..#Journal_TPA') IS NOT NULL DROP TABLE #Journal_TPA;
IF OBJECT_ID('tempdb..#Journal_TPL') IS NOT NULL DROP TABLE #Journal_TPL;
IF OBJECT_ID('tempdb..#Validation') IS NOT NULL DROP TABLE #Validation;

SELECT * INTO #TPA FROM BusinessDetails WHERE Type = 'TPA';
SELECT * INTO #TPL FROM BusinessDetails WHERE Type = 'TPL';
SELECT * INTO #CrossNetting FROM CrossNetting;

CREATE TABLE #Journal_TPA (
    ISIN VARCHAR(20),
    ProdLevel2 VARCHAR(100), ProdLevel3 VARCHAR(100), ProdLevel4 VARCHAR(100),
    ProdLevel5 VARCHAR(100), ProdLevel6 VARCHAR(100), ProdLevel7 VARCHAR(100),
    ProdLevel8 VARCHAR(100), ProdLevel9 VARCHAR(100), ProdLevel10 VARCHAR(100),
    ProdLevel11 VARCHAR(100),
    AllocatedAmount DECIMAL(18,2),
    BalanceSource VARCHAR(100)
);

CREATE TABLE #Journal_TPL (
    ISIN VARCHAR(20),
    ProdLevel2 VARCHAR(100), ProdLevel3 VARCHAR(100), ProdLevel4 VARCHAR(100),
    ProdLevel5 VARCHAR(100), ProdLevel6 VARCHAR(100), ProdLevel7 VARCHAR(100),
    ProdLevel8 VARCHAR(100), ProdLevel9 VARCHAR(100), ProdLevel10 VARCHAR(100),
    ProdLevel11 VARCHAR(100),
    AllocatedAmount DECIMAL(18,2),
    BalanceSource VARCHAR(100)
);

CREATE TABLE #Validation (
    ISIN VARCHAR(20),
    NettingAmount DECIMAL(18,2),
    TPA_Total DECIMAL(18,2),
    TPL_Total DECIMAL(18,2),
    Difference DECIMAL(18,2)
);

;WITH TPA_TPL_Matches AS (
    SELECT
        tpa.ISIN,
        tpa.ProdLevel2, tpa.ProdLevel3, tpa.ProdLevel4, tpa.ProdLevel5, tpa.ProdLevel6,
        tpa.ProdLevel7, tpa.ProdLevel8, tpa.ProdLevel9, tpa.ProdLevel10, tpa.ProdLevel11,
        tpl.ProdLevel2 AS TPL_ProdLevel2, tpl.ProdLevel3 AS TPL_ProdLevel3,
        tpl.ProdLevel4 AS TPL_ProdLevel4, tpl.ProdLevel5 AS TPL_ProdLevel5,
        tpl.ProdLevel6 AS TPL_ProdLevel6, tpl.ProdLevel7 AS TPL_ProdLevel7,
        tpl.ProdLevel8 AS TPL_ProdLevel8, tpl.ProdLevel9 AS TPL_ProdLevel9,
        tpl.ProdLevel10 AS TPL_ProdLevel10, tpl.ProdLevel11 AS TPL_ProdLevel11,
        ABS(tpa.TotalAmount) AS AbsTPA, ABS(tpl.TotalAmount) AS AbsTPL,
        ROW_NUMBER() OVER (PARTITION BY tpa.ISIN ORDER BY
            ISNULL(tpa.ProdLevel11,'') DESC, ISNULL(tpa.ProdLevel10,'') DESC, ISNULL(tpa.ProdLevel9,'') DESC,
            ISNULL(tpa.ProdLevel8,'') DESC, ISNULL(tpa.ProdLevel7,'') DESC, ISNULL(tpa.ProdLevel6,'') DESC,
            ISNULL(tpa.ProdLevel5,'') DESC, ISNULL(tpa.ProdLevel4,'') DESC, ISNULL(tpa.ProdLevel3,'') DESC
        ) AS RowRank
    FROM #TPA tpa
    INNER JOIN #TPL tpl ON tpa.ISIN = tpl.ISIN
),
LimitedAlloc AS (
    SELECT m.*, cn.GBPIFRSBalanceSheetAmount,
           CASE WHEN m.AbsTPA < m.AbsTPL THEN m.AbsTPA ELSE m.AbsTPL END AS MinPair,
           SUM(CASE WHEN m.AbsTPA < m.AbsTPL THEN m.AbsTPA ELSE m.AbsTPL END) OVER (PARTITION BY m.ISIN ORDER BY RowRank) AS RunningTotal,
           SUM(CASE WHEN m.AbsTPA < m.AbsTPL THEN m.AbsTPA ELSE m.AbsTPL END) OVER (PARTITION BY m.ISIN ORDER BY RowRank ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING) AS PrevRunningTotal
    FROM TPA_TPL_Matches m
    INNER JOIN #CrossNetting cn ON m.ISIN = cn.ISIN
)
INSERT INTO #Journal_TPA
SELECT
    ISIN, ProdLevel2, ProdLevel3, ProdLevel4, ProdLevel5, ProdLevel6,
    ProdLevel7, ProdLevel8, ProdLevel9, ProdLevel10, ProdLevel11,
    CASE
        WHEN GBPIFRSBalanceSheetAmount >= RunningTotal THEN MinPair
        WHEN GBPIFRSBalanceSheetAmount > PrevRunningTotal THEN GBPIFRSBalanceSheetAmount - PrevRunningTotal
        ELSE 0
    END AS AllocatedAmount,
    CASE
        WHEN ProdLevel4 IS NOT NULL AND ProdLevel3 IS NOT NULL THEN 'Cross Entity - Business and Diversified'
        WHEN ProdLevel4 IS NOT NULL THEN 'Cross Entity - Business'
        WHEN ProdLevel3 IS NOT NULL THEN 'Cross Entity - Diversified'
        ELSE NULL
    END AS BalanceSource
FROM LimitedAlloc
WHERE (GBPIFRSBalanceSheetAmount >= RunningTotal OR GBPIFRSBalanceSheetAmount > PrevRunningTotal);

INSERT INTO #Journal_TPL
SELECT
    ISIN, TPL_ProdLevel2, TPL_ProdLevel3, TPL_ProdLevel4, TPL_ProdLevel5, TPL_ProdLevel6,
    TPL_ProdLevel7, TPL_ProdLevel8, TPL_ProdLevel9, TPL_ProdLevel10, TPL_ProdLevel11,
    -CASE
        WHEN GBPIFRSBalanceSheetAmount >= RunningTotal THEN MinPair
        WHEN GBPIFRSBalanceSheetAmount > PrevRunningTotal THEN GBPIFRSBalanceSheetAmount - PrevRunningTotal
        ELSE 0
    END AS AllocatedAmount,
    CASE
        WHEN TPL_ProdLevel4 IS NOT NULL AND TPL_ProdLevel3 IS NOT NULL THEN 'Cross Entity - Business and Diversified'
        WHEN TPL_ProdLevel4 IS NOT NULL THEN 'Cross Entity - Business'
        WHEN TPL_ProdLevel3 IS NOT NULL THEN 'Cross Entity - Diversified'
        ELSE NULL
    END AS BalanceSource
FROM LimitedAlloc
WHERE (GBPIFRSBalanceSheetAmount >= RunningTotal OR GBPIFRSBalanceSheetAmount > PrevRunningTotal);

INSERT INTO #Validation
SELECT
    c.ISIN,
    c.GBPIFRSBalanceSheetAmount,
    ISNULL(t.TotalTPA,0),
    ISNULL(p.TotalTPL,0),
    c.GBPIFRSBalanceSheetAmount - ISNULL(t.TotalTPA,0)
FROM #CrossNetting c
LEFT JOIN (SELECT ISIN, SUM(AllocatedAmount) AS TotalTPA FROM #Journal_TPA GROUP BY ISIN) t ON c.ISIN = t.ISIN
LEFT JOIN (SELECT ISIN, SUM(ABS(AllocatedAmount)) AS TotalTPL FROM #Journal_TPL GROUP BY ISIN) p ON c.ISIN = p.ISIN;

SELECT 'TPA' AS JournalType, * FROM #Journal_TPA;
SELECT 'TPL' AS JournalType, * FROM #Journal_TPL;
SELECT * FROM #Validation;

END

